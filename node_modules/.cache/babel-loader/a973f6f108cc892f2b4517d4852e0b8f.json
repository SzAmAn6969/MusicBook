{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/*!\n * wavesurfer.js 6.1.0 (2022-03-31)\n * https://wavesurfer-js.org\n * @license BSD-3-Clause\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"WaveSurfer\", [], factory);else if (typeof exports === 'object') exports[\"WaveSurfer\"] = factory();else root[\"WaveSurfer\"] = factory();\n})(self, function () {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      var __webpack_modules__ = {\n        /***/\n        \"./src/drawer.canvasentry.js\":\n        /*!***********************************!*\\\n          !*** ./src/drawer.canvasentry.js ***!\n          \\***********************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          var _style = _interopRequireDefault(__webpack_require__(\n          /*! ./util/style */\n          \"./src/util/style.js\"));\n\n          var _getId = _interopRequireDefault(__webpack_require__(\n          /*! ./util/get-id */\n          \"./src/util/get-id.js\"));\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n          /**\n           * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n           * and an (optional) progress wave `canvas`.\n           *\n           * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n           * render a waveform, depending on the zoom level.\n           */\n\n\n          var CanvasEntry = /*#__PURE__*/function () {\n            function CanvasEntry() {\n              _classCallCheck(this, CanvasEntry);\n              /**\n               * The wave node\n               *\n               * @type {HTMLCanvasElement}\n               */\n\n\n              this.wave = null;\n              /**\n               * The wave canvas rendering context\n               *\n               * @type {CanvasRenderingContext2D}\n               */\n\n              this.waveCtx = null;\n              /**\n               * The (optional) progress wave node\n               *\n               * @type {HTMLCanvasElement}\n               */\n\n              this.progress = null;\n              /**\n               * The (optional) progress wave canvas rendering context\n               *\n               * @type {CanvasRenderingContext2D}\n               */\n\n              this.progressCtx = null;\n              /**\n               * Start of the area the canvas should render, between 0 and 1\n               *\n               * @type {number}\n               */\n\n              this.start = 0;\n              /**\n               * End of the area the canvas should render, between 0 and 1\n               *\n               * @type {number}\n               */\n\n              this.end = 1;\n              /**\n               * Unique identifier for this entry\n               *\n               * @type {string}\n               */\n\n              this.id = (0, _getId.default)(typeof this.constructor.name !== 'undefined' ? this.constructor.name.toLowerCase() + '_' : 'canvasentry_');\n              /**\n               * Canvas 2d context attributes\n               *\n               * @type {object}\n               */\n\n              this.canvasContextAttributes = {};\n            }\n            /**\n             * Store the wave canvas element and create the 2D rendering context\n             *\n             * @param {HTMLCanvasElement} element The wave `canvas` element.\n             */\n\n\n            _createClass(CanvasEntry, [{\n              key: \"initWave\",\n              value: function initWave(element) {\n                this.wave = element;\n                this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n              }\n              /**\n               * Store the progress wave canvas element and create the 2D rendering\n               * context\n               *\n               * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n               */\n\n            }, {\n              key: \"initProgress\",\n              value: function initProgress(element) {\n                this.progress = element;\n                this.progressCtx = this.progress.getContext('2d', this.canvasContextAttributes);\n              }\n              /**\n               * Update the dimensions\n               *\n               * @param {number} elementWidth Width of the entry\n               * @param {number} totalWidth Total width of the multi canvas renderer\n               * @param {number} width The new width of the element\n               * @param {number} height The new height of the element\n               */\n\n            }, {\n              key: \"updateDimensions\",\n              value: function updateDimensions(elementWidth, totalWidth, width, height) {\n                // where the canvas starts and ends in the waveform, represented as a\n                // decimal between 0 and 1\n                this.start = this.wave.offsetLeft / totalWidth || 0;\n                this.end = this.start + elementWidth / totalWidth; // set wave canvas dimensions\n\n                this.wave.width = width;\n                this.wave.height = height;\n                var elementSize = {\n                  width: elementWidth + 'px'\n                };\n                (0, _style.default)(this.wave, elementSize);\n\n                if (this.hasProgressCanvas) {\n                  // set progress canvas dimensions\n                  this.progress.width = width;\n                  this.progress.height = height;\n                  (0, _style.default)(this.progress, elementSize);\n                }\n              }\n              /**\n               * Clear the wave and progress rendering contexts\n               */\n\n            }, {\n              key: \"clearWave\",\n              value: function clearWave() {\n                // wave\n                this.waveCtx.clearRect(0, 0, this.waveCtx.canvas.width, this.waveCtx.canvas.height); // progress\n\n                if (this.hasProgressCanvas) {\n                  this.progressCtx.clearRect(0, 0, this.progressCtx.canvas.width, this.progressCtx.canvas.height);\n                }\n              }\n              /**\n               * Set the fill styles for wave and progress\n               * @param {string|string[]} waveColor Fill color for the wave canvas,\n               * or an array of colors to apply as a gradient\n               * @param {?string|string[]} progressColor Fill color for the progress canvas,\n               * or an array of colors to apply as a gradient\n               */\n\n            }, {\n              key: \"setFillStyles\",\n              value: function setFillStyles(waveColor, progressColor) {\n                this.waveCtx.fillStyle = this.getFillStyle(this.waveCtx, waveColor);\n\n                if (this.hasProgressCanvas) {\n                  this.progressCtx.fillStyle = this.getFillStyle(this.progressCtx, progressColor);\n                }\n              }\n              /**\n               * Utility function to handle wave color arguments\n               *\n               * When the color argument type is a string or CanvasGradient instance,\n               * it will be returned as is. Otherwise, it will be treated as an array,\n               * and a new CanvasGradient will be returned\n               *\n               * @since 6.0.0\n               * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n               * @param {string|string[]|CanvasGradient} color Either a single fill color\n               *     for the wave canvas, an existing CanvasGradient instance, or an array\n               *     of colors to apply as a gradient\n               * @returns {string|CanvasGradient} Returns a string fillstyle value, or a\n               *     canvas gradient\n               */\n\n            }, {\n              key: \"getFillStyle\",\n              value: function getFillStyle(ctx, color) {\n                if (typeof color == 'string' || color instanceof CanvasGradient) {\n                  return color;\n                }\n\n                var waveGradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n                color.forEach(function (value, index) {\n                  return waveGradient.addColorStop(index / color.length, value);\n                });\n                return waveGradient;\n              }\n              /**\n               * Set the canvas transforms for wave and progress\n               *\n               * @param {boolean} vertical Whether to render vertically\n               */\n\n            }, {\n              key: \"applyCanvasTransforms\",\n              value: function applyCanvasTransforms(vertical) {\n                if (vertical) {\n                  // Reflect the waveform across the line y = -x\n                  this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\n\n                  if (this.hasProgressCanvas) {\n                    this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\n                  }\n                }\n              }\n              /**\n               * Draw a rectangle for wave and progress\n               *\n               * @param {number} x X start position\n               * @param {number} y Y start position\n               * @param {number} width Width of the rectangle\n               * @param {number} height Height of the rectangle\n               * @param {number} radius Radius of the rectangle\n               */\n\n            }, {\n              key: \"fillRects\",\n              value: function fillRects(x, y, width, height, radius) {\n                this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n                if (this.hasProgressCanvas) {\n                  this.fillRectToContext(this.progressCtx, x, y, width, height, radius);\n                }\n              }\n              /**\n               * Draw the actual rectangle on a `canvas` element\n               *\n               * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n               * @param {number} x X start position\n               * @param {number} y Y start position\n               * @param {number} width Width of the rectangle\n               * @param {number} height Height of the rectangle\n               * @param {number} radius Radius of the rectangle\n               */\n\n            }, {\n              key: \"fillRectToContext\",\n              value: function fillRectToContext(ctx, x, y, width, height, radius) {\n                if (!ctx) {\n                  return;\n                }\n\n                if (radius) {\n                  this.drawRoundedRect(ctx, x, y, width, height, radius);\n                } else {\n                  ctx.fillRect(x, y, width, height);\n                }\n              }\n              /**\n               * Draw a rounded rectangle on Canvas\n               *\n               * @param {CanvasRenderingContext2D} ctx Canvas context\n               * @param {number} x X-position of the rectangle\n               * @param {number} y Y-position of the rectangle\n               * @param {number} width Width of the rectangle\n               * @param {number} height Height of the rectangle\n               * @param {number} radius Radius of the rectangle\n               *\n               * @return {void}\n               * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n               */\n\n            }, {\n              key: \"drawRoundedRect\",\n              value: function drawRoundedRect(ctx, x, y, width, height, radius) {\n                if (height === 0) {\n                  return;\n                } // peaks are float values from -1 to 1. Use absolute height values in\n                // order to correctly calculate rounded rectangle coordinates\n\n\n                if (height < 0) {\n                  height *= -1;\n                  y -= height;\n                }\n\n                ctx.beginPath();\n                ctx.moveTo(x + radius, y);\n                ctx.lineTo(x + width - radius, y);\n                ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n                ctx.lineTo(x + width, y + height - radius);\n                ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n                ctx.lineTo(x + radius, y + height);\n                ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n                ctx.lineTo(x, y + radius);\n                ctx.quadraticCurveTo(x, y, x + radius, y);\n                ctx.closePath();\n                ctx.fill();\n              }\n              /**\n               * Render the actual wave and progress lines\n               *\n               * @param {number[]} peaks Array with peaks data\n               * @param {number} absmax Maximum peak value (absolute)\n               * @param {number} halfH Half the height of the waveform\n               * @param {number} offsetY Offset to the top\n               * @param {number} start The x-offset of the beginning of the area that\n               * should be rendered\n               * @param {number} end The x-offset of the end of the area that\n               * should be rendered\n               */\n\n            }, {\n              key: \"drawLines\",\n              value: function drawLines(peaks, absmax, halfH, offsetY, start, end) {\n                this.drawLineToContext(this.waveCtx, peaks, absmax, halfH, offsetY, start, end);\n\n                if (this.hasProgressCanvas) {\n                  this.drawLineToContext(this.progressCtx, peaks, absmax, halfH, offsetY, start, end);\n                }\n              }\n              /**\n               * Render the actual waveform line on a `canvas` element\n               *\n               * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n               * @param {number[]} peaks Array with peaks data\n               * @param {number} absmax Maximum peak value (absolute)\n               * @param {number} halfH Half the height of the waveform\n               * @param {number} offsetY Offset to the top\n               * @param {number} start The x-offset of the beginning of the area that\n               * should be rendered\n               * @param {number} end The x-offset of the end of the area that\n               * should be rendered\n               */\n\n            }, {\n              key: \"drawLineToContext\",\n              value: function drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n                if (!ctx) {\n                  return;\n                }\n\n                var length = peaks.length / 2;\n                var first = Math.round(length * this.start); // use one more peak value to make sure we join peaks at ends -- unless,\n                // of course, this is the last canvas\n\n                var last = Math.round(length * this.end) + 1;\n                var canvasStart = first;\n                var canvasEnd = last;\n                var scale = this.wave.width / (canvasEnd - canvasStart - 1); // optimization\n\n                var halfOffset = halfH + offsetY;\n                var absmaxHalf = absmax / halfH;\n                ctx.beginPath();\n                ctx.moveTo((canvasStart - first) * scale, halfOffset);\n                ctx.lineTo((canvasStart - first) * scale, halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf));\n                var i, peak, h;\n\n                for (i = canvasStart; i < canvasEnd; i++) {\n                  peak = peaks[2 * i] || 0;\n                  h = Math.round(peak / absmaxHalf);\n                  ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n                } // draw the bottom edge going backwards, to make a single\n                // closed hull to fill\n\n\n                var j = canvasEnd - 1;\n\n                for (j; j >= canvasStart; j--) {\n                  peak = peaks[2 * j + 1] || 0;\n                  h = Math.round(peak / absmaxHalf);\n                  ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n                }\n\n                ctx.lineTo((canvasStart - first) * scale, halfOffset - Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf));\n                ctx.closePath();\n                ctx.fill();\n              }\n              /**\n               * Destroys this entry\n               */\n\n            }, {\n              key: \"destroy\",\n              value: function destroy() {\n                this.waveCtx = null;\n                this.wave = null;\n                this.progressCtx = null;\n                this.progress = null;\n              }\n              /**\n               * Return image data of the wave `canvas` element\n               *\n               * When using a `type` of `'blob'`, this will return a `Promise` that\n               * resolves with a `Blob` instance.\n               *\n               * @param {string} format='image/png' An optional value of a format type.\n               * @param {number} quality=0.92 An optional value between 0 and 1.\n               * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n               * @return {string|Promise} When using the default `'dataURL'` `type` this\n               * returns a data URL. When using the `'blob'` `type` this returns a\n               * `Promise` that resolves with a `Blob` instance.\n               */\n\n            }, {\n              key: \"getImage\",\n              value: function getImage(format, quality, type) {\n                var _this = this;\n\n                if (type === 'blob') {\n                  return new Promise(function (resolve) {\n                    _this.wave.toBlob(resolve, format, quality);\n                  });\n                } else if (type === 'dataURL') {\n                  return this.wave.toDataURL(format, quality);\n                }\n              }\n            }]);\n\n            return CanvasEntry;\n          }();\n\n          exports[\"default\"] = CanvasEntry;\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/drawer.js\":\n        /*!***********************!*\\\n          !*** ./src/drawer.js ***!\n          \\***********************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          function _typeof(obj) {\n            \"@babel/helpers - typeof\";\n\n            return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n              return typeof obj;\n            } : function (obj) {\n              return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            }, _typeof(obj);\n          }\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          var util = _interopRequireWildcard(__webpack_require__(\n          /*! ./util */\n          \"./src/util/index.js\"));\n\n          function _getRequireWildcardCache(nodeInterop) {\n            if (typeof WeakMap !== \"function\") return null;\n            var cacheBabelInterop = new WeakMap();\n            var cacheNodeInterop = new WeakMap();\n            return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n              return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n            })(nodeInterop);\n          }\n\n          function _interopRequireWildcard(obj, nodeInterop) {\n            if (!nodeInterop && obj && obj.__esModule) {\n              return obj;\n            }\n\n            if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n              return {\n                default: obj\n              };\n            }\n\n            var cache = _getRequireWildcardCache(nodeInterop);\n\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n\n            var newObj = {};\n            var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n            for (var key in obj) {\n              if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n\n            newObj.default = obj;\n\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n\n            return newObj;\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n\n          function _inherits(subClass, superClass) {\n            if (typeof superClass !== \"function\" && superClass !== null) {\n              throw new TypeError(\"Super expression must either be null or a function\");\n            }\n\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n              constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n              }\n            });\n            Object.defineProperty(subClass, \"prototype\", {\n              writable: false\n            });\n            if (superClass) _setPrototypeOf(subClass, superClass);\n          }\n\n          function _setPrototypeOf(o, p) {\n            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n              o.__proto__ = p;\n              return o;\n            };\n\n            return _setPrototypeOf(o, p);\n          }\n\n          function _createSuper(Derived) {\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n            return function _createSuperInternal() {\n              var Super = _getPrototypeOf(Derived),\n                  result;\n\n              if (hasNativeReflectConstruct) {\n                var NewTarget = _getPrototypeOf(this).constructor;\n\n                result = Reflect.construct(Super, arguments, NewTarget);\n              } else {\n                result = Super.apply(this, arguments);\n              }\n\n              return _possibleConstructorReturn(this, result);\n            };\n          }\n\n          function _possibleConstructorReturn(self, call) {\n            if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n              return call;\n            } else if (call !== void 0) {\n              throw new TypeError(\"Derived constructors may only return object or undefined\");\n            }\n\n            return _assertThisInitialized(self);\n          }\n\n          function _assertThisInitialized(self) {\n            if (self === void 0) {\n              throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            }\n\n            return self;\n          }\n\n          function _isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n\n            try {\n              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n              return true;\n            } catch (e) {\n              return false;\n            }\n          }\n\n          function _getPrototypeOf(o) {\n            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n              return o.__proto__ || Object.getPrototypeOf(o);\n            };\n            return _getPrototypeOf(o);\n          }\n          /**\n           * Parent class for renderers\n           *\n           * @extends {Observer}\n           */\n\n\n          var Drawer = /*#__PURE__*/function (_util$Observer) {\n            _inherits(Drawer, _util$Observer);\n\n            var _super = _createSuper(Drawer);\n            /**\n             * @param {HTMLElement} container The container node of the wavesurfer instance\n             * @param {WavesurferParams} params The wavesurfer initialisation options\n             */\n\n\n            function Drawer(container, params) {\n              var _this;\n\n              _classCallCheck(this, Drawer);\n\n              _this = _super.call(this);\n              _this.container = util.withOrientation(container, params.vertical);\n              /**\n               * @type {WavesurferParams}\n               */\n\n              _this.params = params;\n              /**\n               * The width of the renderer\n               * @type {number}\n               */\n\n              _this.width = 0;\n              /**\n               * The height of the renderer\n               * @type {number}\n               */\n\n              _this.height = params.height * _this.params.pixelRatio;\n              _this.lastPos = 0;\n              /**\n               * The `<wave>` element which is added to the container\n               * @type {HTMLElement}\n               */\n\n              _this.wrapper = null;\n              return _this;\n            }\n            /**\n             * Alias of `util.style`\n             *\n             * @param {HTMLElement} el The element that the styles will be applied to\n             * @param {Object} styles The map of propName: attribute, both are used as-is\n             * @return {HTMLElement} el\n             */\n\n\n            _createClass(Drawer, [{\n              key: \"style\",\n              value: function style(el, styles) {\n                return util.style(el, styles);\n              }\n              /**\n               * Create the wrapper `<wave>` element, style it and set up the events for\n               * interaction\n               */\n\n            }, {\n              key: \"createWrapper\",\n              value: function createWrapper() {\n                this.wrapper = util.withOrientation(this.container.appendChild(document.createElement('wave')), this.params.vertical);\n                this.style(this.wrapper, {\n                  display: 'block',\n                  position: 'relative',\n                  userSelect: 'none',\n                  webkitUserSelect: 'none',\n                  height: this.params.height + 'px'\n                });\n\n                if (this.params.fillParent || this.params.scrollParent) {\n                  this.style(this.wrapper, {\n                    width: '100%',\n                    cursor: this.params.hideCursor ? 'none' : 'auto',\n                    overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                    overflowY: 'hidden'\n                  });\n                }\n\n                this.setupWrapperEvents();\n              }\n              /**\n               * Handle click event\n               *\n               * @param {Event} e Click event\n               * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n               * @return {number} Playback position from 0 to 1\n               */\n\n            }, {\n              key: \"handleEvent\",\n              value: function handleEvent(e, noPrevent) {\n                !noPrevent && e.preventDefault();\n                var clientX = util.withOrientation(e.targetTouches ? e.targetTouches[0] : e, this.params.vertical).clientX;\n                var bbox = this.wrapper.getBoundingClientRect();\n                var nominalWidth = this.width;\n                var parentWidth = this.getWidth();\n                var progressPixels = this.getProgressPixels(bbox, clientX);\n                var progress;\n\n                if (!this.params.fillParent && nominalWidth < parentWidth) {\n                  progress = progressPixels * (this.params.pixelRatio / nominalWidth) || 0;\n                } else {\n                  progress = (progressPixels + this.wrapper.scrollLeft) / this.wrapper.scrollWidth || 0;\n                }\n\n                return util.clamp(progress, 0, 1);\n              }\n            }, {\n              key: \"getProgressPixels\",\n              value: function getProgressPixels(wrapperBbox, clientX) {\n                if (this.params.rtl) {\n                  return wrapperBbox.right - clientX;\n                } else {\n                  return clientX - wrapperBbox.left;\n                }\n              }\n            }, {\n              key: \"setupWrapperEvents\",\n              value: function setupWrapperEvents() {\n                var _this2 = this;\n\n                this.wrapper.addEventListener('click', function (e) {\n                  var orientedEvent = util.withOrientation(e, _this2.params.vertical);\n                  var scrollbarHeight = _this2.wrapper.offsetHeight - _this2.wrapper.clientHeight;\n\n                  if (scrollbarHeight !== 0) {\n                    // scrollbar is visible.  Check if click was on it\n                    var bbox = _this2.wrapper.getBoundingClientRect();\n\n                    if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\n                      // ignore mousedown as it was on the scrollbar\n                      return;\n                    }\n                  }\n\n                  if (_this2.params.interact) {\n                    _this2.fireEvent('click', e, _this2.handleEvent(e));\n                  }\n                });\n                this.wrapper.addEventListener('dblclick', function (e) {\n                  if (_this2.params.interact) {\n                    _this2.fireEvent('dblclick', e, _this2.handleEvent(e));\n                  }\n                });\n                this.wrapper.addEventListener('scroll', function (e) {\n                  return _this2.fireEvent('scroll', e);\n                });\n              }\n              /**\n               * Draw peaks on the canvas\n               *\n               * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n               * for split channel rendering\n               * @param {number} length The width of the area that should be drawn\n               * @param {number} start The x-offset of the beginning of the area that\n               * should be rendered\n               * @param {number} end The x-offset of the end of the area that should be\n               * rendered\n               */\n\n            }, {\n              key: \"drawPeaks\",\n              value: function drawPeaks(peaks, length, start, end) {\n                if (!this.setWidth(length)) {\n                  this.clearWave();\n                }\n\n                this.params.barWidth ? this.drawBars(peaks, 0, start, end) : this.drawWave(peaks, 0, start, end);\n              }\n              /**\n               * Scroll to the beginning\n               */\n\n            }, {\n              key: \"resetScroll\",\n              value: function resetScroll() {\n                if (this.wrapper !== null) {\n                  this.wrapper.scrollLeft = 0;\n                }\n              }\n              /**\n               * Recenter the view-port at a certain percent of the waveform\n               *\n               * @param {number} percent Value from 0 to 1 on the waveform\n               */\n\n            }, {\n              key: \"recenter\",\n              value: function recenter(percent) {\n                var position = this.wrapper.scrollWidth * percent;\n                this.recenterOnPosition(position, true);\n              }\n              /**\n               * Recenter the view-port on a position, either scroll there immediately or\n               * in steps of 5 pixels\n               *\n               * @param {number} position X-offset in pixels\n               * @param {boolean} immediate Set to true to immediately scroll somewhere\n               */\n\n            }, {\n              key: \"recenterOnPosition\",\n              value: function recenterOnPosition(position, immediate) {\n                var scrollLeft = this.wrapper.scrollLeft;\n                var half = ~~(this.wrapper.clientWidth / 2);\n                var maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n                var target = position - half;\n                var offset = target - scrollLeft;\n\n                if (maxScroll == 0) {\n                  // no need to continue if scrollbar is not there\n                  return;\n                } // if the cursor is currently visible...\n\n\n                if (!immediate && -half <= offset && offset < half) {\n                  // set rate at which waveform is centered\n                  var rate = this.params.autoCenterRate; // make rate depend on width of view and length of waveform\n\n                  rate /= half;\n                  rate *= maxScroll;\n                  offset = Math.max(-rate, Math.min(rate, offset));\n                  target = scrollLeft + offset;\n                } // limit target to valid range (0 to maxScroll)\n\n\n                target = Math.max(0, Math.min(maxScroll, target)); // no use attempting to scroll if we're not moving\n\n                if (target != scrollLeft) {\n                  this.wrapper.scrollLeft = target;\n                }\n              }\n              /**\n               * Get the current scroll position in pixels\n               *\n               * @return {number} Horizontal scroll position in pixels\n               */\n\n            }, {\n              key: \"getScrollX\",\n              value: function getScrollX() {\n                var x = 0;\n\n                if (this.wrapper) {\n                  var pixelRatio = this.params.pixelRatio;\n                  x = Math.round(this.wrapper.scrollLeft * pixelRatio); // In cases of elastic scroll (safari with mouse wheel) you can\n                  // scroll beyond the limits of the container\n                  // Calculate and floor the scrollable extent to make sure an out\n                  // of bounds value is not returned\n                  // Ticket #1312\n\n                  if (this.params.scrollParent) {\n                    var maxScroll = ~~(this.wrapper.scrollWidth * pixelRatio - this.getWidth());\n                    x = Math.min(maxScroll, Math.max(0, x));\n                  }\n                }\n\n                return x;\n              }\n              /**\n               * Get the width of the container\n               *\n               * @return {number} The width of the container\n               */\n\n            }, {\n              key: \"getWidth\",\n              value: function getWidth() {\n                return Math.round(this.container.clientWidth * this.params.pixelRatio);\n              }\n              /**\n               * Set the width of the container\n               *\n               * @param {number} width The new width of the container\n               * @return {boolean} Whether the width of the container was updated or not\n               */\n\n            }, {\n              key: \"setWidth\",\n              value: function setWidth(width) {\n                if (this.width == width) {\n                  return false;\n                }\n\n                this.width = width;\n\n                if (this.params.fillParent || this.params.scrollParent) {\n                  this.style(this.wrapper, {\n                    width: ''\n                  });\n                } else {\n                  var newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\n                  this.style(this.wrapper, {\n                    width: newWidth\n                  });\n                }\n\n                this.updateSize();\n                return true;\n              }\n              /**\n               * Set the height of the container\n               *\n               * @param {number} height The new height of the container.\n               * @return {boolean} Whether the height of the container was updated or not\n               */\n\n            }, {\n              key: \"setHeight\",\n              value: function setHeight(height) {\n                if (height == this.height) {\n                  return false;\n                }\n\n                this.height = height;\n                this.style(this.wrapper, {\n                  height: ~~(this.height / this.params.pixelRatio) + 'px'\n                });\n                this.updateSize();\n                return true;\n              }\n              /**\n               * Called by wavesurfer when progress should be rendered\n               *\n               * @param {number} progress From 0 to 1\n               */\n\n            }, {\n              key: \"progress\",\n              value: function progress(_progress) {\n                var minPxDelta = 1 / this.params.pixelRatio;\n                var pos = Math.round(_progress * this.width) * minPxDelta;\n\n                if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n                  this.lastPos = pos;\n\n                  if (this.params.scrollParent && this.params.autoCenter) {\n                    var newPos = ~~(this.wrapper.scrollWidth * _progress);\n                    this.recenterOnPosition(newPos, this.params.autoCenterImmediately);\n                  }\n\n                  this.updateProgress(pos);\n                }\n              }\n              /**\n               * This is called when wavesurfer is destroyed\n               */\n\n            }, {\n              key: \"destroy\",\n              value: function destroy() {\n                this.unAll();\n\n                if (this.wrapper) {\n                  if (this.wrapper.parentNode == this.container.domElement) {\n                    this.container.removeChild(this.wrapper.domElement);\n                  }\n\n                  this.wrapper = null;\n                }\n              }\n              /* Renderer-specific methods */\n\n              /**\n               * Called after cursor related params have changed.\n               *\n               * @abstract\n               */\n\n            }, {\n              key: \"updateCursor\",\n              value: function updateCursor() {}\n              /**\n               * Called when the size of the container changes so the renderer can adjust\n               *\n               * @abstract\n               */\n\n            }, {\n              key: \"updateSize\",\n              value: function updateSize() {}\n              /**\n               * Draw a waveform with bars\n               *\n               * @abstract\n               * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n               * rendering\n               * @param {number} channelIndex The index of the current channel. Normally\n               * should be 0\n               * @param {number} start The x-offset of the beginning of the area that\n               * should be rendered\n               * @param {number} end The x-offset of the end of the area that should be\n               * rendered\n               */\n\n            }, {\n              key: \"drawBars\",\n              value: function drawBars(peaks, channelIndex, start, end) {}\n              /**\n               * Draw a waveform\n               *\n               * @abstract\n               * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n               * rendering\n               * @param {number} channelIndex The index of the current channel. Normally\n               * should be 0\n               * @param {number} start The x-offset of the beginning of the area that\n               * should be rendered\n               * @param {number} end The x-offset of the end of the area that should be\n               * rendered\n               */\n\n            }, {\n              key: \"drawWave\",\n              value: function drawWave(peaks, channelIndex, start, end) {}\n              /**\n               * Clear the waveform\n               *\n               * @abstract\n               */\n\n            }, {\n              key: \"clearWave\",\n              value: function clearWave() {}\n              /**\n               * Render the new progress\n               *\n               * @abstract\n               * @param {number} position X-Offset of progress position in pixels\n               */\n\n            }, {\n              key: \"updateProgress\",\n              value: function updateProgress(position) {}\n            }]);\n\n            return Drawer;\n          }(util.Observer);\n\n          exports[\"default\"] = Drawer;\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/drawer.multicanvas.js\":\n        /*!***********************************!*\\\n          !*** ./src/drawer.multicanvas.js ***!\n          \\***********************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          function _typeof(obj) {\n            \"@babel/helpers - typeof\";\n\n            return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n              return typeof obj;\n            } : function (obj) {\n              return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            }, _typeof(obj);\n          }\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          var _drawer = _interopRequireDefault(__webpack_require__(\n          /*! ./drawer */\n          \"./src/drawer.js\"));\n\n          var util = _interopRequireWildcard(__webpack_require__(\n          /*! ./util */\n          \"./src/util/index.js\"));\n\n          var _drawer2 = _interopRequireDefault(__webpack_require__(\n          /*! ./drawer.canvasentry */\n          \"./src/drawer.canvasentry.js\"));\n\n          function _getRequireWildcardCache(nodeInterop) {\n            if (typeof WeakMap !== \"function\") return null;\n            var cacheBabelInterop = new WeakMap();\n            var cacheNodeInterop = new WeakMap();\n            return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n              return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n            })(nodeInterop);\n          }\n\n          function _interopRequireWildcard(obj, nodeInterop) {\n            if (!nodeInterop && obj && obj.__esModule) {\n              return obj;\n            }\n\n            if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n              return {\n                default: obj\n              };\n            }\n\n            var cache = _getRequireWildcardCache(nodeInterop);\n\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n\n            var newObj = {};\n            var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n            for (var key in obj) {\n              if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n\n            newObj.default = obj;\n\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n\n            return newObj;\n          }\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n\n          function _inherits(subClass, superClass) {\n            if (typeof superClass !== \"function\" && superClass !== null) {\n              throw new TypeError(\"Super expression must either be null or a function\");\n            }\n\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n              constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n              }\n            });\n            Object.defineProperty(subClass, \"prototype\", {\n              writable: false\n            });\n            if (superClass) _setPrototypeOf(subClass, superClass);\n          }\n\n          function _setPrototypeOf(o, p) {\n            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n              o.__proto__ = p;\n              return o;\n            };\n\n            return _setPrototypeOf(o, p);\n          }\n\n          function _createSuper(Derived) {\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n            return function _createSuperInternal() {\n              var Super = _getPrototypeOf(Derived),\n                  result;\n\n              if (hasNativeReflectConstruct) {\n                var NewTarget = _getPrototypeOf(this).constructor;\n\n                result = Reflect.construct(Super, arguments, NewTarget);\n              } else {\n                result = Super.apply(this, arguments);\n              }\n\n              return _possibleConstructorReturn(this, result);\n            };\n          }\n\n          function _possibleConstructorReturn(self, call) {\n            if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n              return call;\n            } else if (call !== void 0) {\n              throw new TypeError(\"Derived constructors may only return object or undefined\");\n            }\n\n            return _assertThisInitialized(self);\n          }\n\n          function _assertThisInitialized(self) {\n            if (self === void 0) {\n              throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            }\n\n            return self;\n          }\n\n          function _isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n\n            try {\n              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n              return true;\n            } catch (e) {\n              return false;\n            }\n          }\n\n          function _getPrototypeOf(o) {\n            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n              return o.__proto__ || Object.getPrototypeOf(o);\n            };\n            return _getPrototypeOf(o);\n          }\n          /**\n           * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n           * builtin renderer.\n           *\n           * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n           * on the zoom level.\n           */\n\n\n          var MultiCanvas = /*#__PURE__*/function (_Drawer) {\n            _inherits(MultiCanvas, _Drawer);\n\n            var _super = _createSuper(MultiCanvas);\n            /**\n             * @param {HTMLElement} container The container node of the wavesurfer instance\n             * @param {WavesurferParams} params The wavesurfer initialisation options\n             */\n\n\n            function MultiCanvas(container, params) {\n              var _this;\n\n              _classCallCheck(this, MultiCanvas);\n\n              _this = _super.call(this, container, params);\n              /**\n               * @type {number}\n               */\n\n              _this.maxCanvasWidth = params.maxCanvasWidth;\n              /**\n               * @type {number}\n               */\n\n              _this.maxCanvasElementWidth = Math.round(params.maxCanvasWidth / params.pixelRatio);\n              /**\n               * Whether or not the progress wave is rendered. If the `waveColor`\n               * and `progressColor` are the same color it is not.\n               *\n               * @type {boolean}\n               */\n\n              _this.hasProgressCanvas = params.waveColor != params.progressColor;\n              /**\n               * @type {number}\n               */\n\n              _this.halfPixel = 0.5 / params.pixelRatio;\n              /**\n               * List of `CanvasEntry` instances.\n               *\n               * @type {Array}\n               */\n\n              _this.canvases = [];\n              /**\n               * @type {HTMLElement}\n               */\n\n              _this.progressWave = null;\n              /**\n               * Class used to generate entries.\n               *\n               * @type {function}\n               */\n\n              _this.EntryClass = _drawer2.default;\n              /**\n               * Canvas 2d context attributes.\n               *\n               * @type {object}\n               */\n\n              _this.canvasContextAttributes = params.drawingContextAttributes;\n              /**\n               * Overlap added between entries to prevent vertical white stripes\n               * between `canvas` elements.\n               *\n               * @type {number}\n               */\n\n              _this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n              /**\n               * The radius of the wave bars. Makes bars rounded\n               *\n               * @type {number}\n               */\n\n              _this.barRadius = params.barRadius || 0;\n              /**\n               * Whether to render the waveform vertically. Defaults to false.\n               *\n               * @type {boolean}\n               */\n\n              _this.vertical = params.vertical;\n              return _this;\n            }\n            /**\n             * Initialize the drawer\n             */\n\n\n            _createClass(MultiCanvas, [{\n              key: \"init\",\n              value: function init() {\n                this.createWrapper();\n                this.createElements();\n              }\n              /**\n               * Create the canvas elements and style them\n               *\n               */\n\n            }, {\n              key: \"createElements\",\n              value: function createElements() {\n                this.progressWave = util.withOrientation(this.wrapper.appendChild(document.createElement('wave')), this.params.vertical);\n                this.style(this.progressWave, {\n                  position: 'absolute',\n                  zIndex: 3,\n                  left: 0,\n                  top: 0,\n                  bottom: 0,\n                  overflow: 'hidden',\n                  width: '0',\n                  display: 'none',\n                  boxSizing: 'border-box',\n                  borderRightStyle: 'solid',\n                  pointerEvents: 'none'\n                });\n                this.addCanvas();\n                this.updateCursor();\n              }\n              /**\n               * Update cursor style\n               */\n\n            }, {\n              key: \"updateCursor\",\n              value: function updateCursor() {\n                this.style(this.progressWave, {\n                  borderRightWidth: this.params.cursorWidth + 'px',\n                  borderRightColor: this.params.cursorColor\n                });\n              }\n              /**\n               * Adjust to the updated size by adding or removing canvases\n               */\n\n            }, {\n              key: \"updateSize\",\n              value: function updateSize() {\n                var _this2 = this;\n\n                var totalWidth = Math.round(this.width / this.params.pixelRatio);\n                var requiredCanvases = Math.ceil(totalWidth / (this.maxCanvasElementWidth + this.overlap)); // add required canvases\n\n                while (this.canvases.length < requiredCanvases) {\n                  this.addCanvas();\n                } // remove older existing canvases, if any\n\n\n                while (this.canvases.length > requiredCanvases) {\n                  this.removeCanvas();\n                }\n\n                var canvasWidth = this.maxCanvasWidth + this.overlap;\n                var lastCanvas = this.canvases.length - 1;\n                this.canvases.forEach(function (entry, i) {\n                  if (i == lastCanvas) {\n                    canvasWidth = _this2.width - _this2.maxCanvasWidth * lastCanvas;\n                  }\n\n                  _this2.updateDimensions(entry, canvasWidth, _this2.height);\n\n                  entry.clearWave();\n                });\n              }\n              /**\n               * Add a canvas to the canvas list\n               *\n               */\n\n            }, {\n              key: \"addCanvas\",\n              value: function addCanvas() {\n                var entry = new this.EntryClass();\n                entry.canvasContextAttributes = this.canvasContextAttributes;\n                entry.hasProgressCanvas = this.hasProgressCanvas;\n                entry.halfPixel = this.halfPixel;\n                var leftOffset = this.maxCanvasElementWidth * this.canvases.length; // wave\n\n                var wave = util.withOrientation(this.wrapper.appendChild(document.createElement('canvas')), this.params.vertical);\n                this.style(wave, {\n                  position: 'absolute',\n                  zIndex: 2,\n                  left: leftOffset + 'px',\n                  top: 0,\n                  bottom: 0,\n                  height: '100%',\n                  pointerEvents: 'none'\n                });\n                entry.initWave(wave); // progress\n\n                if (this.hasProgressCanvas) {\n                  var progress = util.withOrientation(this.progressWave.appendChild(document.createElement('canvas')), this.params.vertical);\n                  this.style(progress, {\n                    position: 'absolute',\n                    left: leftOffset + 'px',\n                    top: 0,\n                    bottom: 0,\n                    height: '100%'\n                  });\n                  entry.initProgress(progress);\n                }\n\n                this.canvases.push(entry);\n              }\n              /**\n               * Pop single canvas from the list\n               *\n               */\n\n            }, {\n              key: \"removeCanvas\",\n              value: function removeCanvas() {\n                var lastEntry = this.canvases[this.canvases.length - 1]; // wave\n\n                lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement); // progress\n\n                if (this.hasProgressCanvas) {\n                  lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\n                } // cleanup\n\n\n                if (lastEntry) {\n                  lastEntry.destroy();\n                  lastEntry = null;\n                }\n\n                this.canvases.pop();\n              }\n              /**\n               * Update the dimensions of a canvas element\n               *\n               * @param {CanvasEntry} entry Target entry\n               * @param {number} width The new width of the element\n               * @param {number} height The new height of the element\n               */\n\n            }, {\n              key: \"updateDimensions\",\n              value: function updateDimensions(entry, width, height) {\n                var elementWidth = Math.round(width / this.params.pixelRatio);\n                var totalWidth = Math.round(this.width / this.params.pixelRatio); // update canvas dimensions\n\n                entry.updateDimensions(elementWidth, totalWidth, width, height); // style element\n\n                this.style(this.progressWave, {\n                  display: 'block'\n                });\n              }\n              /**\n               * Clear the whole multi-canvas\n               */\n\n            }, {\n              key: \"clearWave\",\n              value: function clearWave() {\n                var _this3 = this;\n\n                util.frame(function () {\n                  _this3.canvases.forEach(function (entry) {\n                    return entry.clearWave();\n                  });\n                })();\n              }\n              /**\n               * Draw a waveform with bars\n               *\n               * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n               * for split channel rendering\n               * @param {number} channelIndex The index of the current channel. Normally\n               * should be 0. Must be an integer.\n               * @param {number} start The x-offset of the beginning of the area that\n               * should be rendered\n               * @param {number} end The x-offset of the end of the area that should be\n               * rendered\n               * @returns {void}\n               */\n\n            }, {\n              key: \"drawBars\",\n              value: function drawBars(peaks, channelIndex, start, end) {\n                var _this4 = this;\n\n                return this.prepareDraw(peaks, channelIndex, start, end, function (_ref) {\n                  var absmax = _ref.absmax,\n                      hasMinVals = _ref.hasMinVals,\n                      height = _ref.height,\n                      offsetY = _ref.offsetY,\n                      halfH = _ref.halfH,\n                      peaks = _ref.peaks,\n                      ch = _ref.channelIndex; // if drawBars was called within ws.empty we don't pass a start and\n                  // don't want anything to happen\n\n                  if (start === undefined) {\n                    return;\n                  } // Skip every other value if there are negatives.\n\n\n                  var peakIndexScale = hasMinVals ? 2 : 1;\n                  var length = peaks.length / peakIndexScale;\n                  var bar = _this4.params.barWidth * _this4.params.pixelRatio;\n                  var gap = _this4.params.barGap === null ? Math.max(_this4.params.pixelRatio, ~~(bar / 2)) : Math.max(_this4.params.pixelRatio, _this4.params.barGap * _this4.params.pixelRatio);\n                  var step = bar + gap;\n                  var scale = length / _this4.width;\n                  var first = start;\n                  var last = end;\n                  var peakIndex = first;\n\n                  for (peakIndex; peakIndex < last; peakIndex += step) {\n                    // search for the highest peak in the range this bar falls into\n                    var peak = 0;\n                    var peakIndexRange = Math.floor(peakIndex * scale) * peakIndexScale; // start index\n\n                    var peakIndexEnd = Math.floor((peakIndex + step) * scale) * peakIndexScale;\n\n                    do {\n                      // do..while makes sure at least one peak is always evaluated\n                      var newPeak = Math.abs(peaks[peakIndexRange]); // for arrays starting with negative values\n\n                      if (newPeak > peak) {\n                        peak = newPeak; // higher\n                      }\n\n                      peakIndexRange += peakIndexScale; // skip every other value for negatives\n                    } while (peakIndexRange < peakIndexEnd); // calculate the height of this bar according to the highest peak found\n\n\n                    var h = Math.round(peak / absmax * halfH); // in case of silences, allow the user to specify that we\n                    // always draw *something* (normally a 1px high bar)\n\n                    if (h == 0 && _this4.params.barMinHeight) {\n                      h = _this4.params.barMinHeight;\n                    }\n\n                    _this4.fillRect(peakIndex + _this4.halfPixel, halfH - h + offsetY, bar + _this4.halfPixel, h * 2, _this4.barRadius, ch);\n                  }\n                });\n              }\n              /**\n               * Draw a waveform\n               *\n               * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n               * for split channel rendering\n               * @param {number} channelIndex The index of the current channel. Normally\n               * should be 0\n               * @param {number?} start The x-offset of the beginning of the area that\n               * should be rendered (If this isn't set only a flat line is rendered)\n               * @param {number?} end The x-offset of the end of the area that should be\n               * rendered\n               * @returns {void}\n               */\n\n            }, {\n              key: \"drawWave\",\n              value: function drawWave(peaks, channelIndex, start, end) {\n                var _this5 = this;\n\n                return this.prepareDraw(peaks, channelIndex, start, end, function (_ref2) {\n                  var absmax = _ref2.absmax,\n                      hasMinVals = _ref2.hasMinVals,\n                      height = _ref2.height,\n                      offsetY = _ref2.offsetY,\n                      halfH = _ref2.halfH,\n                      peaks = _ref2.peaks,\n                      channelIndex = _ref2.channelIndex;\n\n                  if (!hasMinVals) {\n                    var reflectedPeaks = [];\n                    var len = peaks.length;\n                    var i = 0;\n\n                    for (i; i < len; i++) {\n                      reflectedPeaks[2 * i] = peaks[i];\n                      reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n\n                    peaks = reflectedPeaks;\n                  } // if drawWave was called within ws.empty we don't pass a start and\n                  // end and simply want a flat line\n\n\n                  if (start !== undefined) {\n                    _this5.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                  } // always draw a median line\n\n\n                  _this5.fillRect(0, halfH + offsetY - _this5.halfPixel, _this5.width, _this5.halfPixel, _this5.barRadius, channelIndex);\n                });\n              }\n              /**\n               * Tell the canvas entries to render their portion of the waveform\n               *\n               * @param {number[]} peaks Peaks data\n               * @param {number} absmax Maximum peak value (absolute)\n               * @param {number} halfH Half the height of the waveform\n               * @param {number} offsetY Offset to the top\n               * @param {number} start The x-offset of the beginning of the area that\n               * should be rendered\n               * @param {number} end The x-offset of the end of the area that\n               * should be rendered\n               * @param {channelIndex} channelIndex The channel index of the line drawn\n               */\n\n            }, {\n              key: \"drawLine\",\n              value: function drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n                var _this6 = this;\n\n                var _ref3 = this.params.splitChannelsOptions.channelColors[channelIndex] || {},\n                    waveColor = _ref3.waveColor,\n                    progressColor = _ref3.progressColor;\n\n                this.canvases.forEach(function (entry, i) {\n                  _this6.setFillStyles(entry, waveColor, progressColor);\n\n                  _this6.applyCanvasTransforms(entry, _this6.params.vertical);\n\n                  entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n                });\n              }\n              /**\n               * Draw a rectangle on the multi-canvas\n               *\n               * @param {number} x X-position of the rectangle\n               * @param {number} y Y-position of the rectangle\n               * @param {number} width Width of the rectangle\n               * @param {number} height Height of the rectangle\n               * @param {number} radius Radius of the rectangle\n               * @param {channelIndex} channelIndex The channel index of the bar drawn\n               */\n\n            }, {\n              key: \"fillRect\",\n              value: function fillRect(x, y, width, height, radius, channelIndex) {\n                var startCanvas = Math.floor(x / this.maxCanvasWidth);\n                var endCanvas = Math.min(Math.ceil((x + width) / this.maxCanvasWidth) + 1, this.canvases.length);\n                var i = startCanvas;\n\n                for (i; i < endCanvas; i++) {\n                  var entry = this.canvases[i];\n                  var leftOffset = i * this.maxCanvasWidth;\n                  var intersection = {\n                    x1: Math.max(x, i * this.maxCanvasWidth),\n                    y1: y,\n                    x2: Math.min(x + width, i * this.maxCanvasWidth + entry.wave.width),\n                    y2: y + height\n                  };\n\n                  if (intersection.x1 < intersection.x2) {\n                    var _ref4 = this.params.splitChannelsOptions.channelColors[channelIndex] || {},\n                        waveColor = _ref4.waveColor,\n                        progressColor = _ref4.progressColor;\n\n                    this.setFillStyles(entry, waveColor, progressColor);\n                    this.applyCanvasTransforms(entry, this.params.vertical);\n                    entry.fillRects(intersection.x1 - leftOffset, intersection.y1, intersection.x2 - intersection.x1, intersection.y2 - intersection.y1, radius);\n                  }\n                }\n              }\n              /**\n               * Returns whether to hide the channel from being drawn based on params.\n               *\n               * @param {number} channelIndex The index of the current channel.\n               * @returns {bool} True to hide the channel, false to draw.\n               */\n\n            }, {\n              key: \"hideChannel\",\n              value: function hideChannel(channelIndex) {\n                return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n              }\n              /**\n               * Performs preparation tasks and calculations which are shared by `drawBars`\n               * and `drawWave`\n               *\n               * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n               * split channel rendering\n               * @param {number} channelIndex The index of the current channel. Normally\n               * should be 0\n               * @param {number?} start The x-offset of the beginning of the area that\n               * should be rendered. If this isn't set only a flat line is rendered\n               * @param {number?} end The x-offset of the end of the area that should be\n               * rendered\n               * @param {function} fn The render function to call, e.g. `drawWave`\n               * @param {number} drawIndex The index of the current channel after filtering.\n               * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\n               * @returns {void}\n               */\n\n            }, {\n              key: \"prepareDraw\",\n              value: function prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\n                var _this7 = this;\n\n                return util.frame(function () {\n                  // Split channels and call this function with the channelIndex set\n                  if (peaks[0] instanceof Array) {\n                    var channels = peaks;\n\n                    if (_this7.params.splitChannels) {\n                      var filteredChannels = channels.filter(function (c, i) {\n                        return !_this7.hideChannel(i);\n                      });\n\n                      if (!_this7.params.splitChannelsOptions.overlay) {\n                        _this7.setHeight(Math.max(filteredChannels.length, 1) * _this7.params.height * _this7.params.pixelRatio);\n                      }\n\n                      var overallAbsMax;\n\n                      if (_this7.params.splitChannelsOptions && _this7.params.splitChannelsOptions.relativeNormalization) {\n                        // calculate maximum peak across channels to use for normalization\n                        overallAbsMax = util.max(channels.map(function (channelPeaks) {\n                          return util.absMax(channelPeaks);\n                        }));\n                      }\n\n                      return channels.forEach(function (channelPeaks, i) {\n                        return _this7.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax);\n                      });\n                    }\n\n                    peaks = channels[0];\n                  } // Return and do not draw channel peaks if hidden.\n\n\n                  if (_this7.hideChannel(channelIndex)) {\n                    return;\n                  } // calculate maximum modulation value, either from the barHeight\n                  // parameter or if normalize=true from the largest value in the peak\n                  // set\n\n\n                  var absmax = 1 / _this7.params.barHeight;\n\n                  if (_this7.params.normalize) {\n                    absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\n                  } // Bar wave draws the bottom only as a reflection of the top,\n                  // so we don't need negative values\n\n\n                  var hasMinVals = [].some.call(peaks, function (val) {\n                    return val < 0;\n                  });\n                  var height = _this7.params.height * _this7.params.pixelRatio;\n                  var halfH = height / 2;\n                  var offsetY = height * drawIndex || 0; // Override offsetY if overlay is true\n\n                  if (_this7.params.splitChannelsOptions && _this7.params.splitChannelsOptions.overlay) {\n                    offsetY = 0;\n                  }\n\n                  return fn({\n                    absmax: absmax,\n                    hasMinVals: hasMinVals,\n                    height: height,\n                    offsetY: offsetY,\n                    halfH: halfH,\n                    peaks: peaks,\n                    channelIndex: channelIndex\n                  });\n                })();\n              }\n              /**\n               * Set the fill styles for a certain entry (wave and progress)\n               *\n               * @param {CanvasEntry} entry Target entry\n               * @param {string} waveColor Wave color to draw this entry\n               * @param {string} progressColor Progress color to draw this entry\n               */\n\n            }, {\n              key: \"setFillStyles\",\n              value: function setFillStyles(entry) {\n                var waveColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.waveColor;\n                var progressColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.params.progressColor;\n                entry.setFillStyles(waveColor, progressColor);\n              }\n              /**\n               * Set the canvas transforms for a certain entry (wave and progress)\n               *\n               * @param {CanvasEntry} entry Target entry\n               * @param {boolean} vertical Whether to render the waveform vertically\n               */\n\n            }, {\n              key: \"applyCanvasTransforms\",\n              value: function applyCanvasTransforms(entry) {\n                var vertical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                entry.applyCanvasTransforms(vertical);\n              }\n              /**\n               * Return image data of the multi-canvas\n               *\n               * When using a `type` of `'blob'`, this will return a `Promise`.\n               *\n               * @param {string} format='image/png' An optional value of a format type.\n               * @param {number} quality=0.92 An optional value between 0 and 1.\n               * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n               * @return {string|string[]|Promise} When using the default `'dataURL'`\n               * `type` this returns a single data URL or an array of data URLs,\n               * one for each canvas. When using the `'blob'` `type` this returns a\n               * `Promise` that resolves with an array of `Blob` instances, one for each\n               * canvas.\n               */\n\n            }, {\n              key: \"getImage\",\n              value: function getImage(format, quality, type) {\n                if (type === 'blob') {\n                  return Promise.all(this.canvases.map(function (entry) {\n                    return entry.getImage(format, quality, type);\n                  }));\n                } else if (type === 'dataURL') {\n                  var images = this.canvases.map(function (entry) {\n                    return entry.getImage(format, quality, type);\n                  });\n                  return images.length > 1 ? images : images[0];\n                }\n              }\n              /**\n               * Render the new progress\n               *\n               * @param {number} position X-offset of progress position in pixels\n               */\n\n            }, {\n              key: \"updateProgress\",\n              value: function updateProgress(position) {\n                this.style(this.progressWave, {\n                  width: position + 'px'\n                });\n              }\n            }]);\n\n            return MultiCanvas;\n          }(_drawer.default);\n\n          exports[\"default\"] = MultiCanvas;\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/mediaelement-webaudio.js\":\n        /*!**************************************!*\\\n          !*** ./src/mediaelement-webaudio.js ***!\n          \\**************************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          function _typeof(obj) {\n            \"@babel/helpers - typeof\";\n\n            return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n              return typeof obj;\n            } : function (obj) {\n              return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            }, _typeof(obj);\n          }\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          var _mediaelement = _interopRequireDefault(__webpack_require__(\n          /*! ./mediaelement */\n          \"./src/mediaelement.js\"));\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n\n          function _get() {\n            if (typeof Reflect !== \"undefined\" && Reflect.get) {\n              _get = Reflect.get;\n            } else {\n              _get = function _get(target, property, receiver) {\n                var base = _superPropBase(target, property);\n\n                if (!base) return;\n                var desc = Object.getOwnPropertyDescriptor(base, property);\n\n                if (desc.get) {\n                  return desc.get.call(arguments.length < 3 ? target : receiver);\n                }\n\n                return desc.value;\n              };\n            }\n\n            return _get.apply(this, arguments);\n          }\n\n          function _superPropBase(object, property) {\n            while (!Object.prototype.hasOwnProperty.call(object, property)) {\n              object = _getPrototypeOf(object);\n              if (object === null) break;\n            }\n\n            return object;\n          }\n\n          function _inherits(subClass, superClass) {\n            if (typeof superClass !== \"function\" && superClass !== null) {\n              throw new TypeError(\"Super expression must either be null or a function\");\n            }\n\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n              constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n              }\n            });\n            Object.defineProperty(subClass, \"prototype\", {\n              writable: false\n            });\n            if (superClass) _setPrototypeOf(subClass, superClass);\n          }\n\n          function _setPrototypeOf(o, p) {\n            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n              o.__proto__ = p;\n              return o;\n            };\n\n            return _setPrototypeOf(o, p);\n          }\n\n          function _createSuper(Derived) {\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n            return function _createSuperInternal() {\n              var Super = _getPrototypeOf(Derived),\n                  result;\n\n              if (hasNativeReflectConstruct) {\n                var NewTarget = _getPrototypeOf(this).constructor;\n\n                result = Reflect.construct(Super, arguments, NewTarget);\n              } else {\n                result = Super.apply(this, arguments);\n              }\n\n              return _possibleConstructorReturn(this, result);\n            };\n          }\n\n          function _possibleConstructorReturn(self, call) {\n            if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n              return call;\n            } else if (call !== void 0) {\n              throw new TypeError(\"Derived constructors may only return object or undefined\");\n            }\n\n            return _assertThisInitialized(self);\n          }\n\n          function _assertThisInitialized(self) {\n            if (self === void 0) {\n              throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            }\n\n            return self;\n          }\n\n          function _isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n\n            try {\n              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n              return true;\n            } catch (e) {\n              return false;\n            }\n          }\n\n          function _getPrototypeOf(o) {\n            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n              return o.__proto__ || Object.getPrototypeOf(o);\n            };\n            return _getPrototypeOf(o);\n          }\n          /**\n           * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n           * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n           * buffer the entire file in one request, and you still get the filtering and scripting functionality\n           * of the webaudio API.\n           * Note that in order to use range requests and prevent buffering, you must provide peak data.\n           *\n           * @since 3.2.0\n           */\n\n\n          var MediaElementWebAudio = /*#__PURE__*/function (_MediaElement) {\n            _inherits(MediaElementWebAudio, _MediaElement);\n\n            var _super = _createSuper(MediaElementWebAudio);\n            /**\n             * Construct the backend\n             *\n             * @param {WavesurferParams} params Wavesurfer parameters\n             */\n\n\n            function MediaElementWebAudio(params) {\n              var _this;\n\n              _classCallCheck(this, MediaElementWebAudio);\n\n              _this = _super.call(this, params);\n              /** @private */\n\n              _this.params = params;\n              /** @private */\n\n              _this.sourceMediaElement = null;\n              return _this;\n            }\n            /**\n             * Initialise the backend, called in `wavesurfer.createBackend()`\n             */\n\n\n            _createClass(MediaElementWebAudio, [{\n              key: \"init\",\n              value: function init() {\n                this.setPlaybackRate(this.params.audioRate);\n                this.createTimer();\n                this.createVolumeNode();\n                this.createScriptNode();\n                this.createAnalyserNode();\n              }\n              /**\n               * Private method called by both `load` (from url)\n               * and `loadElt` (existing media element) methods.\n               *\n               * @param {HTMLMediaElement} media HTML5 Audio or Video element\n               * @param {number[]|Number.<Array[]>} peaks Array of peak data\n               * @param {string} preload HTML 5 preload attribute value\n               * @private\n               */\n\n            }, {\n              key: \"_load\",\n              value: function _load(media, peaks, preload) {\n                _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"_load\", this).call(this, media, peaks, preload);\n\n                this.createMediaElementSource(media);\n              }\n              /**\n               * Create MediaElementSource node\n               *\n               * @since 3.2.0\n               * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n               */\n\n            }, {\n              key: \"createMediaElementSource\",\n              value: function createMediaElementSource(mediaElement) {\n                this.sourceMediaElement = this.ac.createMediaElementSource(mediaElement);\n                this.sourceMediaElement.connect(this.analyser);\n              }\n            }, {\n              key: \"play\",\n              value: function play(start, end) {\n                this.resumeAudioContext();\n                return _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"play\", this).call(this, start, end);\n              }\n              /**\n               * This is called when wavesurfer is destroyed\n               *\n               */\n\n            }, {\n              key: \"destroy\",\n              value: function destroy() {\n                _get(_getPrototypeOf(MediaElementWebAudio.prototype), \"destroy\", this).call(this);\n\n                this.destroyWebAudio();\n              }\n            }]);\n\n            return MediaElementWebAudio;\n          }(_mediaelement.default);\n\n          exports[\"default\"] = MediaElementWebAudio;\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/mediaelement.js\":\n        /*!*****************************!*\\\n          !*** ./src/mediaelement.js ***!\n          \\*****************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          function _typeof(obj) {\n            \"@babel/helpers - typeof\";\n\n            return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n              return typeof obj;\n            } : function (obj) {\n              return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            }, _typeof(obj);\n          }\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          var _webaudio = _interopRequireDefault(__webpack_require__(\n          /*! ./webaudio */\n          \"./src/webaudio.js\"));\n\n          var util = _interopRequireWildcard(__webpack_require__(\n          /*! ./util */\n          \"./src/util/index.js\"));\n\n          function _getRequireWildcardCache(nodeInterop) {\n            if (typeof WeakMap !== \"function\") return null;\n            var cacheBabelInterop = new WeakMap();\n            var cacheNodeInterop = new WeakMap();\n            return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n              return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n            })(nodeInterop);\n          }\n\n          function _interopRequireWildcard(obj, nodeInterop) {\n            if (!nodeInterop && obj && obj.__esModule) {\n              return obj;\n            }\n\n            if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n              return {\n                default: obj\n              };\n            }\n\n            var cache = _getRequireWildcardCache(nodeInterop);\n\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n\n            var newObj = {};\n            var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n            for (var key in obj) {\n              if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n\n            newObj.default = obj;\n\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n\n            return newObj;\n          }\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n\n          function _get() {\n            if (typeof Reflect !== \"undefined\" && Reflect.get) {\n              _get = Reflect.get;\n            } else {\n              _get = function _get(target, property, receiver) {\n                var base = _superPropBase(target, property);\n\n                if (!base) return;\n                var desc = Object.getOwnPropertyDescriptor(base, property);\n\n                if (desc.get) {\n                  return desc.get.call(arguments.length < 3 ? target : receiver);\n                }\n\n                return desc.value;\n              };\n            }\n\n            return _get.apply(this, arguments);\n          }\n\n          function _superPropBase(object, property) {\n            while (!Object.prototype.hasOwnProperty.call(object, property)) {\n              object = _getPrototypeOf(object);\n              if (object === null) break;\n            }\n\n            return object;\n          }\n\n          function _inherits(subClass, superClass) {\n            if (typeof superClass !== \"function\" && superClass !== null) {\n              throw new TypeError(\"Super expression must either be null or a function\");\n            }\n\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n              constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n              }\n            });\n            Object.defineProperty(subClass, \"prototype\", {\n              writable: false\n            });\n            if (superClass) _setPrototypeOf(subClass, superClass);\n          }\n\n          function _setPrototypeOf(o, p) {\n            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n              o.__proto__ = p;\n              return o;\n            };\n\n            return _setPrototypeOf(o, p);\n          }\n\n          function _createSuper(Derived) {\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n            return function _createSuperInternal() {\n              var Super = _getPrototypeOf(Derived),\n                  result;\n\n              if (hasNativeReflectConstruct) {\n                var NewTarget = _getPrototypeOf(this).constructor;\n\n                result = Reflect.construct(Super, arguments, NewTarget);\n              } else {\n                result = Super.apply(this, arguments);\n              }\n\n              return _possibleConstructorReturn(this, result);\n            };\n          }\n\n          function _possibleConstructorReturn(self, call) {\n            if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n              return call;\n            } else if (call !== void 0) {\n              throw new TypeError(\"Derived constructors may only return object or undefined\");\n            }\n\n            return _assertThisInitialized(self);\n          }\n\n          function _assertThisInitialized(self) {\n            if (self === void 0) {\n              throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            }\n\n            return self;\n          }\n\n          function _isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n\n            try {\n              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n              return true;\n            } catch (e) {\n              return false;\n            }\n          }\n\n          function _getPrototypeOf(o) {\n            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n              return o.__proto__ || Object.getPrototypeOf(o);\n            };\n            return _getPrototypeOf(o);\n          }\n          /**\n           * MediaElement backend\n           */\n\n\n          var MediaElement = /*#__PURE__*/function (_WebAudio) {\n            _inherits(MediaElement, _WebAudio);\n\n            var _super = _createSuper(MediaElement);\n            /**\n             * Construct the backend\n             *\n             * @param {WavesurferParams} params Wavesurfer parameters\n             */\n\n\n            function MediaElement(params) {\n              var _this;\n\n              _classCallCheck(this, MediaElement);\n\n              _this = _super.call(this, params);\n              /** @private */\n\n              _this.params = params;\n              /**\n               * Initially a dummy media element to catch errors. Once `_load` is\n               * called, this will contain the actual `HTMLMediaElement`.\n               * @private\n               */\n\n              _this.media = {\n                currentTime: 0,\n                duration: 0,\n                paused: true,\n                playbackRate: 1,\n                play: function play() {},\n                pause: function pause() {},\n                volume: 0\n              };\n              /** @private */\n\n              _this.mediaType = params.mediaType.toLowerCase();\n              /** @private */\n\n              _this.elementPosition = params.elementPosition;\n              /** @private */\n\n              _this.peaks = null;\n              /** @private */\n\n              _this.playbackRate = 1;\n              /** @private */\n\n              _this.volume = 1;\n              /** @private */\n\n              _this.isMuted = false;\n              /** @private */\n\n              _this.buffer = null;\n              /** @private */\n\n              _this.onPlayEnd = null;\n              /** @private */\n\n              _this.mediaListeners = {};\n              return _this;\n            }\n            /**\n             * Initialise the backend, called in `wavesurfer.createBackend()`\n             */\n\n\n            _createClass(MediaElement, [{\n              key: \"init\",\n              value: function init() {\n                this.setPlaybackRate(this.params.audioRate);\n                this.createTimer();\n              }\n              /**\n               * Attach event listeners to media element.\n               */\n\n            }, {\n              key: \"_setupMediaListeners\",\n              value: function _setupMediaListeners() {\n                var _this2 = this;\n\n                this.mediaListeners.error = function () {\n                  _this2.fireEvent('error', 'Error loading media element');\n                };\n\n                this.mediaListeners.canplay = function () {\n                  _this2.fireEvent('canplay');\n                };\n\n                this.mediaListeners.ended = function () {\n                  _this2.fireEvent('finish');\n                }; // listen to and relay play, pause and seeked events to enable\n                // playback control from the external media element\n\n\n                this.mediaListeners.play = function () {\n                  _this2.fireEvent('play');\n                };\n\n                this.mediaListeners.pause = function () {\n                  _this2.fireEvent('pause');\n                };\n\n                this.mediaListeners.seeked = function (event) {\n                  _this2.fireEvent('seek');\n                };\n\n                this.mediaListeners.volumechange = function (event) {\n                  _this2.isMuted = _this2.media.muted;\n\n                  if (_this2.isMuted) {\n                    _this2.volume = 0;\n                  } else {\n                    _this2.volume = _this2.media.volume;\n                  }\n\n                  _this2.fireEvent('volume');\n                }; // reset event listeners\n\n\n                Object.keys(this.mediaListeners).forEach(function (id) {\n                  _this2.media.removeEventListener(id, _this2.mediaListeners[id]);\n\n                  _this2.media.addEventListener(id, _this2.mediaListeners[id]);\n                });\n              }\n              /**\n               * Create a timer to provide a more precise `audioprocess` event.\n               */\n\n            }, {\n              key: \"createTimer\",\n              value: function createTimer() {\n                var _this3 = this;\n\n                var onAudioProcess = function onAudioProcess() {\n                  if (_this3.isPaused()) {\n                    return;\n                  }\n\n                  _this3.fireEvent('audioprocess', _this3.getCurrentTime()); // Call again in the next frame\n\n\n                  util.frame(onAudioProcess)();\n                };\n\n                this.on('play', onAudioProcess); // Update the progress one more time to prevent it from being stuck in\n                // case of lower framerates\n\n                this.on('pause', function () {\n                  _this3.fireEvent('audioprocess', _this3.getCurrentTime());\n                });\n              }\n              /**\n               * Create media element with url as its source,\n               * and append to container element.\n               *\n               * @param {string} url Path to media file\n               * @param {HTMLElement} container HTML element\n               * @param {number[]|Number.<Array[]>} peaks Array of peak data\n               * @param {string} preload HTML 5 preload attribute value\n               * @throws Will throw an error if the `url` argument is not a valid media\n               * element.\n               */\n\n            }, {\n              key: \"load\",\n              value: function load(url, container, peaks, preload) {\n                var media = document.createElement(this.mediaType);\n                media.controls = this.params.mediaControls;\n                media.autoplay = this.params.autoplay || false;\n                media.preload = preload == null ? 'auto' : preload;\n                media.src = url;\n                media.style.width = '100%';\n                var prevMedia = container.querySelector(this.mediaType);\n\n                if (prevMedia) {\n                  container.removeChild(prevMedia);\n                }\n\n                container.appendChild(media);\n\n                this._load(media, peaks, preload);\n              }\n              /**\n               * Load existing media element.\n               *\n               * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n               * @param {number[]|Number.<Array[]>} peaks Array of peak data\n               */\n\n            }, {\n              key: \"loadElt\",\n              value: function loadElt(elt, peaks) {\n                elt.controls = this.params.mediaControls;\n                elt.autoplay = this.params.autoplay || false;\n\n                this._load(elt, peaks, elt.preload);\n              }\n              /**\n               * Method called by both `load` (from url)\n               * and `loadElt` (existing media element) methods.\n               *\n               * @param {HTMLMediaElement} media HTML5 Audio or Video element\n               * @param {number[]|Number.<Array[]>} peaks Array of peak data\n               * @param {string} preload HTML 5 preload attribute value\n               * @throws Will throw an error if the `media` argument is not a valid media\n               * element.\n               * @private\n               */\n\n            }, {\n              key: \"_load\",\n              value: function _load(media, peaks, preload) {\n                // verify media element is valid\n                if (!(media instanceof HTMLMediaElement) || typeof media.addEventListener === 'undefined') {\n                  throw new Error('media parameter is not a valid media element');\n                } // load must be called manually on iOS, otherwise peaks won't draw\n                // until a user interaction triggers load --> 'ready' event\n                //\n                // note that we avoid calling media.load here when given peaks and preload == 'none'\n                // as this almost always triggers some browser fetch of the media.\n\n\n                if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n                  // Resets the media element and restarts the media resource. Any\n                  // pending events are discarded. How much media data is fetched is\n                  // still affected by the preload attribute.\n                  media.load();\n                }\n\n                this.media = media;\n\n                this._setupMediaListeners();\n\n                this.peaks = peaks;\n                this.onPlayEnd = null;\n                this.buffer = null;\n                this.isMuted = media.muted;\n                this.setPlaybackRate(this.playbackRate);\n                this.setVolume(this.volume);\n              }\n              /**\n               * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n               *\n               * @return {boolean} Media paused or not\n               */\n\n            }, {\n              key: \"isPaused\",\n              value: function isPaused() {\n                return !this.media || this.media.paused;\n              }\n              /**\n               * Used by `wavesurfer.getDuration()`\n               *\n               * @return {number} Duration\n               */\n\n            }, {\n              key: \"getDuration\",\n              value: function getDuration() {\n                if (this.explicitDuration) {\n                  return this.explicitDuration;\n                }\n\n                var duration = (this.buffer || this.media).duration;\n\n                if (duration >= Infinity) {\n                  // streaming audio\n                  duration = this.media.seekable.end(0);\n                }\n\n                return duration;\n              }\n              /**\n               * Returns the current time in seconds relative to the audio-clip's\n               * duration.\n               *\n               * @return {number} Current time\n               */\n\n            }, {\n              key: \"getCurrentTime\",\n              value: function getCurrentTime() {\n                return this.media && this.media.currentTime;\n              }\n              /**\n               * Get the position from 0 to 1\n               *\n               * @return {number} Current position\n               */\n\n            }, {\n              key: \"getPlayedPercents\",\n              value: function getPlayedPercents() {\n                return this.getCurrentTime() / this.getDuration() || 0;\n              }\n              /**\n               * Get the audio source playback rate.\n               *\n               * @return {number} Playback rate\n               */\n\n            }, {\n              key: \"getPlaybackRate\",\n              value: function getPlaybackRate() {\n                return this.playbackRate || this.media.playbackRate;\n              }\n              /**\n               * Set the audio source playback rate.\n               *\n               * @param {number} value Playback rate\n               */\n\n            }, {\n              key: \"setPlaybackRate\",\n              value: function setPlaybackRate(value) {\n                this.playbackRate = value || 1;\n                this.media.playbackRate = this.playbackRate;\n              }\n              /**\n               * Used by `wavesurfer.seekTo()`\n               *\n               * @param {number} start Position to start at in seconds\n               */\n\n            }, {\n              key: \"seekTo\",\n              value: function seekTo(start) {\n                if (start != null && !isNaN(start)) {\n                  this.media.currentTime = start;\n                }\n\n                this.clearPlayEnd();\n              }\n              /**\n               * Plays the loaded audio region.\n               *\n               * @param {number} start Start offset in seconds, relative to the beginning\n               * of a clip.\n               * @param {number} end When to stop, relative to the beginning of a clip.\n               * @emits MediaElement#play\n               * @return {Promise} Result\n               */\n\n            }, {\n              key: \"play\",\n              value: function play(start, end) {\n                this.seekTo(start);\n                var promise = this.media.play();\n                end && this.setPlayEnd(end);\n                return promise;\n              }\n              /**\n               * Pauses the loaded audio.\n               *\n               * @emits MediaElement#pause\n               * @return {Promise} Result\n               */\n\n            }, {\n              key: \"pause\",\n              value: function pause() {\n                var promise;\n\n                if (this.media) {\n                  promise = this.media.pause();\n                }\n\n                this.clearPlayEnd();\n                return promise;\n              }\n              /**\n               * Set the play end\n               *\n               * @param {number} end Where to end\n               */\n\n            }, {\n              key: \"setPlayEnd\",\n              value: function setPlayEnd(end) {\n                var _this4 = this;\n\n                this.clearPlayEnd();\n\n                this._onPlayEnd = function (time) {\n                  if (time >= end) {\n                    _this4.pause();\n\n                    _this4.seekTo(end);\n                  }\n                };\n\n                this.on('audioprocess', this._onPlayEnd);\n              }\n              /** @private */\n\n            }, {\n              key: \"clearPlayEnd\",\n              value: function clearPlayEnd() {\n                if (this._onPlayEnd) {\n                  this.un('audioprocess', this._onPlayEnd);\n                  this._onPlayEnd = null;\n                }\n              }\n              /**\n               * Compute the max and min value of the waveform when broken into\n               * <length> subranges.\n               *\n               * @param {number} length How many subranges to break the waveform into.\n               * @param {number} first First sample in the required range.\n               * @param {number} last Last sample in the required range.\n               * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n               * arrays of peaks consisting of (max, min) values for each subrange.\n               */\n\n            }, {\n              key: \"getPeaks\",\n              value: function getPeaks(length, first, last) {\n                if (this.buffer) {\n                  return _get(_getPrototypeOf(MediaElement.prototype), \"getPeaks\", this).call(this, length, first, last);\n                }\n\n                return this.peaks || [];\n              }\n              /**\n               * Set the sink id for the media player\n               *\n               * @param {string} deviceId String value representing audio device id.\n               * @returns {Promise} A Promise that resolves to `undefined` when there\n               * are no errors.\n               */\n\n            }, {\n              key: \"setSinkId\",\n              value: function setSinkId(deviceId) {\n                if (deviceId) {\n                  if (!this.media.setSinkId) {\n                    return Promise.reject(new Error('setSinkId is not supported in your browser'));\n                  }\n\n                  return this.media.setSinkId(deviceId);\n                }\n\n                return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n              }\n              /**\n               * Get the current volume\n               *\n               * @return {number} value A floating point value between 0 and 1.\n               */\n\n            }, {\n              key: \"getVolume\",\n              value: function getVolume() {\n                return this.volume;\n              }\n              /**\n               * Set the audio volume\n               *\n               * @param {number} value A floating point value between 0 and 1.\n               */\n\n            }, {\n              key: \"setVolume\",\n              value: function setVolume(value) {\n                this.volume = value; // no need to change when it's already at that volume\n\n                if (this.media.volume !== this.volume) {\n                  this.media.volume = this.volume;\n                }\n              }\n              /**\n               * Enable or disable muted audio\n               *\n               * @since 4.0.0\n               * @param {boolean} muted Specify `true` to mute audio.\n               */\n\n            }, {\n              key: \"setMute\",\n              value: function setMute(muted) {\n                // This causes a volume change to be emitted too through the\n                // volumechange event listener.\n                this.isMuted = this.media.muted = muted;\n              }\n              /**\n               * This is called when wavesurfer is destroyed\n               *\n               */\n\n            }, {\n              key: \"destroy\",\n              value: function destroy() {\n                var _this5 = this;\n\n                this.pause();\n                this.unAll();\n                this.destroyed = true; // cleanup media event listeners\n\n                Object.keys(this.mediaListeners).forEach(function (id) {\n                  if (_this5.media) {\n                    _this5.media.removeEventListener(id, _this5.mediaListeners[id]);\n                  }\n                });\n\n                if (this.params.removeMediaElementOnDestroy && this.media && this.media.parentNode) {\n                  this.media.parentNode.removeChild(this.media);\n                }\n\n                this.media = null;\n              }\n            }]);\n\n            return MediaElement;\n          }(_webaudio.default);\n\n          exports[\"default\"] = MediaElement;\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/peakcache.js\":\n        /*!**************************!*\\\n          !*** ./src/peakcache.js ***!\n          \\**************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n          /**\n           * Caches the decoded peaks data to improve rendering speed for large audio\n           *\n           * Is used if the option parameter `partialRender` is set to `true`\n           */\n\n\n          var PeakCache = /*#__PURE__*/function () {\n            /**\n             * Instantiate cache\n             */\n            function PeakCache() {\n              _classCallCheck(this, PeakCache);\n\n              this.clearPeakCache();\n            }\n            /**\n             * Empty the cache\n             */\n\n\n            _createClass(PeakCache, [{\n              key: \"clearPeakCache\",\n              value: function clearPeakCache() {\n                /**\n                 * Flat array with entries that are always in pairs to mark the\n                 * beginning and end of each subrange.  This is a convenience so we can\n                 * iterate over the pairs for easy set difference operations.\n                 * @private\n                 */\n                this.peakCacheRanges = [];\n                /**\n                 * Length of the entire cachable region, used for resetting the cache\n                 * when this changes (zoom events, for instance).\n                 * @private\n                 */\n\n                this.peakCacheLength = -1;\n              }\n              /**\n               * Add a range of peaks to the cache\n               *\n               * @param {number} length The length of the range\n               * @param {number} start The x offset of the start of the range\n               * @param {number} end The x offset of the end of the range\n               * @return {Number.<Array[]>} Array with arrays of numbers\n               */\n\n            }, {\n              key: \"addRangeToPeakCache\",\n              value: function addRangeToPeakCache(length, start, end) {\n                if (length != this.peakCacheLength) {\n                  this.clearPeakCache();\n                  this.peakCacheLength = length;\n                } // Return ranges that weren't in the cache before the call.\n\n\n                var uncachedRanges = [];\n                var i = 0; // Skip ranges before the current start.\n\n                while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] < start) {\n                  i++;\n                } // If |i| is even, |start| falls after an existing range.  Otherwise,\n                // |start| falls between an existing range, and the uncached region\n                // starts when we encounter the next node in |peakCacheRanges| or\n                // |end|, whichever comes first.\n\n\n                if (i % 2 == 0) {\n                  uncachedRanges.push(start);\n                }\n\n                while (i < this.peakCacheRanges.length && this.peakCacheRanges[i] <= end) {\n                  uncachedRanges.push(this.peakCacheRanges[i]);\n                  i++;\n                } // If |i| is even, |end| is after all existing ranges.\n\n\n                if (i % 2 == 0) {\n                  uncachedRanges.push(end);\n                } // Filter out the 0-length ranges.\n\n\n                uncachedRanges = uncachedRanges.filter(function (item, pos, arr) {\n                  if (pos == 0) {\n                    return item != arr[pos + 1];\n                  } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                  }\n\n                  return item != arr[pos - 1] && item != arr[pos + 1];\n                }); // Merge the two ranges together, uncachedRanges will either contain\n                // wholly new points, or duplicates of points in peakCacheRanges.  If\n                // duplicates are detected, remove both and extend the range.\n\n                this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n                this.peakCacheRanges = this.peakCacheRanges.sort(function (a, b) {\n                  return a - b;\n                }).filter(function (item, pos, arr) {\n                  if (pos == 0) {\n                    return item != arr[pos + 1];\n                  } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                  }\n\n                  return item != arr[pos - 1] && item != arr[pos + 1];\n                }); // Push the uncached ranges into an array of arrays for ease of\n                // iteration in the functions that call this.\n\n                var uncachedRangePairs = [];\n\n                for (i = 0; i < uncachedRanges.length; i += 2) {\n                  uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n                }\n\n                return uncachedRangePairs;\n              }\n              /**\n               * For testing\n               *\n               * @return {Number.<Array[]>} Array with arrays of numbers\n               */\n\n            }, {\n              key: \"getCacheRanges\",\n              value: function getCacheRanges() {\n                var peakCacheRangePairs = [];\n                var i;\n\n                for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n                  peakCacheRangePairs.push([this.peakCacheRanges[i], this.peakCacheRanges[i + 1]]);\n                }\n\n                return peakCacheRangePairs;\n              }\n            }]);\n\n            return PeakCache;\n          }();\n\n          exports[\"default\"] = PeakCache;\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/absMax.js\":\n        /*!****************************!*\\\n          !*** ./src/util/absMax.js ***!\n          \\****************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = absMax;\n\n          var _max = _interopRequireDefault(__webpack_require__(\n          /*! ./max */\n          \"./src/util/max.js\"));\n\n          var _min = _interopRequireDefault(__webpack_require__(\n          /*! ./min */\n          \"./src/util/min.js\"));\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n          /**\r\n           * Get the largest absolute value in an array\r\n           *\r\n           * @param   {Array} values Array of numbers\r\n           * @returns {Number} Largest number found\r\n           * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n           * @since 4.3.0\r\n           */\n\n\n          function absMax(values) {\n            var max = (0, _max.default)(values);\n            var min = (0, _min.default)(values);\n            return -min > max ? -min : max;\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/clamp.js\":\n        /*!***************************!*\\\n          !*** ./src/util/clamp.js ***!\n          \\***************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = clamp;\n          /**\n           * Returns a number limited to the given range.\n           *\n           * @param {number} val The number to be limited to a range\n           * @param {number} min The lower boundary of the limit range\n           * @param {number} max The upper boundary of the limit range\n           * @returns {number} A number in the range [min, max]\n           */\n\n          function clamp(val, min, max) {\n            return Math.min(Math.max(min, val), max);\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/fetch.js\":\n        /*!***************************!*\\\n          !*** ./src/util/fetch.js ***!\n          \\***************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = fetchFile;\n\n          var _observer = _interopRequireDefault(__webpack_require__(\n          /*! ./observer */\n          \"./src/util/observer.js\"));\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n\n          var ProgressHandler = /*#__PURE__*/function () {\n            /**\n             * Instantiate ProgressHandler\n             *\n             * @param {Observer} instance The `fetchFile` observer instance.\n             * @param {Number} contentLength Content length.\n             * @param {Response} response Response object.\n             */\n            function ProgressHandler(instance, contentLength, response) {\n              _classCallCheck(this, ProgressHandler);\n\n              this.instance = instance;\n              this.instance._reader = response.body.getReader();\n              this.total = parseInt(contentLength, 10);\n              this.loaded = 0;\n            }\n            /**\n             * A method that is called once, immediately after the `ReadableStream``\n             * is constructed.\n             *\n             * @param {ReadableStreamDefaultController} controller Controller instance\n             *     used to control the stream.\n             */\n\n\n            _createClass(ProgressHandler, [{\n              key: \"start\",\n              value: function start(controller) {\n                var _this = this;\n\n                var read = function read() {\n                  // instance._reader.read() returns a promise that resolves\n                  // when a value has been received\n                  _this.instance._reader.read().then(function (_ref) {\n                    var done = _ref.done,\n                        value = _ref.value; // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n\n                    if (done) {\n                      // ensure onProgress called when content-length=0\n                      if (_this.total === 0) {\n                        _this.instance.onProgress.call(_this.instance, {\n                          loaded: _this.loaded,\n                          total: _this.total,\n                          lengthComputable: false\n                        });\n                      } // no more data needs to be consumed, close the stream\n\n\n                      controller.close();\n                      return;\n                    }\n\n                    _this.loaded += value.byteLength;\n\n                    _this.instance.onProgress.call(_this.instance, {\n                      loaded: _this.loaded,\n                      total: _this.total,\n                      lengthComputable: !(_this.total === 0)\n                    }); // enqueue the next data chunk into our target stream\n\n\n                    controller.enqueue(value);\n                    read();\n                  }).catch(function (error) {\n                    controller.error(error);\n                  });\n                };\n\n                read();\n              }\n            }]);\n\n            return ProgressHandler;\n          }();\n          /**\n           * Load a file using `fetch`.\n           *\n           * @param {object} options Request options to use. See example below.\n           * @returns {Observer} Observer instance\n           * @example\n           * // default options\n           * let options = {\n           *     url: undefined,\n           *     method: 'GET',\n           *     mode: 'cors',\n           *     credentials: 'same-origin',\n           *     cache: 'default',\n           *     responseType: 'json',\n           *     requestHeaders: [],\n           *     redirect: 'follow',\n           *     referrer: 'client'\n           * };\n           *\n           * // override some options\n           * options.url = '../media/demo.wav';\n          \n           * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n           * options.responseType = 'arraybuffer';\n           *\n           * // make fetch call\n           * let request = util.fetchFile(options);\n           *\n           * // listen for events\n           * request.on('progress', e => {\n           *     console.log('progress', e);\n           * });\n           *\n           * request.on('success', data => {\n           *     console.log('success!', data);\n           * });\n           *\n           * request.on('error', e => {\n           *     console.warn('fetchFile error: ', e);\n           * });\n           */\n\n\n          function fetchFile(options) {\n            if (!options) {\n              throw new Error('fetch options missing');\n            } else if (!options.url) {\n              throw new Error('fetch url missing');\n            }\n\n            var instance = new _observer.default();\n            var fetchHeaders = new Headers();\n            var fetchRequest = new Request(options.url); // add ability to abort\n\n            instance.controller = new AbortController(); // check if headers have to be added\n\n            if (options && options.requestHeaders) {\n              // add custom request headers\n              options.requestHeaders.forEach(function (header) {\n                fetchHeaders.append(header.key, header.value);\n              });\n            } // parse fetch options\n\n\n            var responseType = options.responseType || 'json';\n            var fetchOptions = {\n              method: options.method || 'GET',\n              headers: fetchHeaders,\n              mode: options.mode || 'cors',\n              credentials: options.credentials || 'same-origin',\n              cache: options.cache || 'default',\n              redirect: options.redirect || 'follow',\n              referrer: options.referrer || 'client',\n              signal: instance.controller.signal\n            };\n            fetch(fetchRequest, fetchOptions).then(function (response) {\n              // store response reference\n              instance.response = response;\n              var progressAvailable = true;\n\n              if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n              } // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n\n\n              var contentLength = response.headers.get('content-length');\n\n              if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n              }\n\n              if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n              } // fire progress event when during load\n\n\n              instance.onProgress = function (e) {\n                instance.fireEvent('progress', e);\n              };\n\n              return new Response(new ReadableStream(new ProgressHandler(instance, contentLength, response)), fetchOptions);\n            }).then(function (response) {\n              var errMsg;\n\n              if (response.ok) {\n                switch (responseType) {\n                  case 'arraybuffer':\n                    return response.arrayBuffer();\n\n                  case 'json':\n                    return response.json();\n\n                  case 'blob':\n                    return response.blob();\n\n                  case 'text':\n                    return response.text();\n\n                  default:\n                    errMsg = 'Unknown responseType: ' + responseType;\n                    break;\n                }\n              }\n\n              if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n              }\n\n              throw new Error(errMsg);\n            }).then(function (response) {\n              instance.fireEvent('success', response);\n            }).catch(function (error) {\n              instance.fireEvent('error', error);\n            }); // return the fetch request\n\n            instance.fetchRequest = fetchRequest;\n            return instance;\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/frame.js\":\n        /*!***************************!*\\\n          !*** ./src/util/frame.js ***!\n          \\***************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = frame;\n\n          var _requestAnimationFrame = _interopRequireDefault(__webpack_require__(\n          /*! ./request-animation-frame */\n          \"./src/util/request-animation-frame.js\"));\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n          /**\n           * Create a function which will be called at the next requestAnimationFrame\n           * cycle\n           *\n           * @param {function} func The function to call\n           *\n           * @return {func} The function wrapped within a requestAnimationFrame\n           */\n\n\n          function frame(func) {\n            return function () {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return (0, _requestAnimationFrame.default)(function () {\n                return func.apply(void 0, args);\n              });\n            };\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/get-id.js\":\n        /*!****************************!*\\\n          !*** ./src/util/get-id.js ***!\n          \\****************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = getId;\n          /**\n           * Get a random prefixed ID\n           *\n           * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n           * @returns {String} Random prefixed ID\n           * @example\n           * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n           *\n           * let prefix = 'foo-';\n           * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n           */\n\n          function getId(prefix) {\n            if (prefix === undefined) {\n              prefix = 'wavesurfer_';\n            }\n\n            return prefix + Math.random().toString(32).substring(2);\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/index.js\":\n        /*!***************************!*\\\n          !*** ./src/util/index.js ***!\n          \\***************************/\n\n        /***/\n        (__unused_webpack_module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          Object.defineProperty(exports, \"Observer\", {\n            enumerable: true,\n            get: function get() {\n              return _observer.default;\n            }\n          });\n          Object.defineProperty(exports, \"absMax\", {\n            enumerable: true,\n            get: function get() {\n              return _absMax.default;\n            }\n          });\n          Object.defineProperty(exports, \"clamp\", {\n            enumerable: true,\n            get: function get() {\n              return _clamp.default;\n            }\n          });\n          Object.defineProperty(exports, \"debounce\", {\n            enumerable: true,\n            get: function get() {\n              return _debounce.default;\n            }\n          });\n          Object.defineProperty(exports, \"fetchFile\", {\n            enumerable: true,\n            get: function get() {\n              return _fetch.default;\n            }\n          });\n          Object.defineProperty(exports, \"frame\", {\n            enumerable: true,\n            get: function get() {\n              return _frame.default;\n            }\n          });\n          Object.defineProperty(exports, \"getId\", {\n            enumerable: true,\n            get: function get() {\n              return _getId.default;\n            }\n          });\n          Object.defineProperty(exports, \"ignoreSilenceMode\", {\n            enumerable: true,\n            get: function get() {\n              return _silenceMode.default;\n            }\n          });\n          Object.defineProperty(exports, \"max\", {\n            enumerable: true,\n            get: function get() {\n              return _max.default;\n            }\n          });\n          Object.defineProperty(exports, \"min\", {\n            enumerable: true,\n            get: function get() {\n              return _min.default;\n            }\n          });\n          Object.defineProperty(exports, \"preventClick\", {\n            enumerable: true,\n            get: function get() {\n              return _preventClick.default;\n            }\n          });\n          Object.defineProperty(exports, \"requestAnimationFrame\", {\n            enumerable: true,\n            get: function get() {\n              return _requestAnimationFrame.default;\n            }\n          });\n          Object.defineProperty(exports, \"style\", {\n            enumerable: true,\n            get: function get() {\n              return _style.default;\n            }\n          });\n          Object.defineProperty(exports, \"withOrientation\", {\n            enumerable: true,\n            get: function get() {\n              return _orientation.default;\n            }\n          });\n\n          var _getId = _interopRequireDefault(__webpack_require__(\n          /*! ./get-id */\n          \"./src/util/get-id.js\"));\n\n          var _max = _interopRequireDefault(__webpack_require__(\n          /*! ./max */\n          \"./src/util/max.js\"));\n\n          var _min = _interopRequireDefault(__webpack_require__(\n          /*! ./min */\n          \"./src/util/min.js\"));\n\n          var _absMax = _interopRequireDefault(__webpack_require__(\n          /*! ./absMax */\n          \"./src/util/absMax.js\"));\n\n          var _observer = _interopRequireDefault(__webpack_require__(\n          /*! ./observer */\n          \"./src/util/observer.js\"));\n\n          var _style = _interopRequireDefault(__webpack_require__(\n          /*! ./style */\n          \"./src/util/style.js\"));\n\n          var _requestAnimationFrame = _interopRequireDefault(__webpack_require__(\n          /*! ./request-animation-frame */\n          \"./src/util/request-animation-frame.js\"));\n\n          var _frame = _interopRequireDefault(__webpack_require__(\n          /*! ./frame */\n          \"./src/util/frame.js\"));\n\n          var _debounce = _interopRequireDefault(__webpack_require__(\n          /*! debounce */\n          \"./node_modules/debounce/index.js\"));\n\n          var _preventClick = _interopRequireDefault(__webpack_require__(\n          /*! ./prevent-click */\n          \"./src/util/prevent-click.js\"));\n\n          var _fetch = _interopRequireDefault(__webpack_require__(\n          /*! ./fetch */\n          \"./src/util/fetch.js\"));\n\n          var _clamp = _interopRequireDefault(__webpack_require__(\n          /*! ./clamp */\n          \"./src/util/clamp.js\"));\n\n          var _orientation = _interopRequireDefault(__webpack_require__(\n          /*! ./orientation */\n          \"./src/util/orientation.js\"));\n\n          var _silenceMode = _interopRequireDefault(__webpack_require__(\n          /*! ./silence-mode */\n          \"./src/util/silence-mode.js\"));\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n          /***/\n\n        },\n\n        /***/\n        \"./src/util/max.js\":\n        /*!*************************!*\\\n          !*** ./src/util/max.js ***!\n          \\*************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = max;\n          /**\n           * Get the largest value\n           *\n           * @param   {Array} values Array of numbers\n           * @returns {Number} Largest number found\n           * @example console.log(max([1, 2, 3])); // logs 3\n           */\n\n          function max(values) {\n            var largest = -Infinity;\n            Object.keys(values).forEach(function (i) {\n              if (values[i] > largest) {\n                largest = values[i];\n              }\n            });\n            return largest;\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/min.js\":\n        /*!*************************!*\\\n          !*** ./src/util/min.js ***!\n          \\*************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = min;\n          /**\n           * Get the smallest value\n           *\n           * @param   {Array} values Array of numbers\n           * @returns {Number} Smallest number found\n           * @example console.log(min([1, 2, 3])); // logs 1\n           */\n\n          function min(values) {\n            var smallest = Number(Infinity);\n            Object.keys(values).forEach(function (i) {\n              if (values[i] < smallest) {\n                smallest = values[i];\n              }\n            });\n            return smallest;\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/observer.js\":\n        /*!******************************!*\\\n          !*** ./src/util/observer.js ***!\n          \\******************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n          /**\n           * @typedef {Object} ListenerDescriptor\n           * @property {string} name The name of the event\n           * @property {function} callback The callback\n           * @property {function} un The function to call to remove the listener\n           */\n\n          /**\n           * Observer class\n           */\n\n\n          var Observer = /*#__PURE__*/function () {\n            /**\n             * Instantiate Observer\n             */\n            function Observer() {\n              _classCallCheck(this, Observer);\n              /**\n               * @private\n               * @todo Initialise the handlers here already and remove the conditional\n               * assignment in `on()`\n               */\n\n\n              this._disabledEventEmissions = [];\n              this.handlers = null;\n            }\n            /**\n             * Attach a handler function for an event.\n             *\n             * @param {string} event Name of the event to listen to\n             * @param {function} fn The callback to trigger when the event is fired\n             * @return {ListenerDescriptor} The event descriptor\n             */\n\n\n            _createClass(Observer, [{\n              key: \"on\",\n              value: function on(event, fn) {\n                var _this = this;\n\n                if (!this.handlers) {\n                  this.handlers = {};\n                }\n\n                var handlers = this.handlers[event];\n\n                if (!handlers) {\n                  handlers = this.handlers[event] = [];\n                }\n\n                handlers.push(fn); // Return an event descriptor\n\n                return {\n                  name: event,\n                  callback: fn,\n                  un: function un(e, fn) {\n                    return _this.un(e, fn);\n                  }\n                };\n              }\n              /**\n               * Remove an event handler.\n               *\n               * @param {string} event Name of the event the listener that should be\n               * removed listens to\n               * @param {function} fn The callback that should be removed\n               */\n\n            }, {\n              key: \"un\",\n              value: function un(event, fn) {\n                if (!this.handlers) {\n                  return;\n                }\n\n                var handlers = this.handlers[event];\n                var i;\n\n                if (handlers) {\n                  if (fn) {\n                    for (i = handlers.length - 1; i >= 0; i--) {\n                      if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                      }\n                    }\n                  } else {\n                    handlers.length = 0;\n                  }\n                }\n              }\n              /**\n               * Remove all event handlers.\n               */\n\n            }, {\n              key: \"unAll\",\n              value: function unAll() {\n                this.handlers = null;\n              }\n              /**\n               * Attach a handler to an event. The handler is executed at most once per\n               * event type.\n               *\n               * @param {string} event The event to listen to\n               * @param {function} handler The callback that is only to be called once\n               * @return {ListenerDescriptor} The event descriptor\n               */\n\n            }, {\n              key: \"once\",\n              value: function once(event, handler) {\n                var _this2 = this;\n\n                var fn = function fn() {\n                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                  }\n                  /*  eslint-disable no-invalid-this */\n\n\n                  handler.apply(_this2, args);\n                  /*  eslint-enable no-invalid-this */\n\n                  setTimeout(function () {\n                    _this2.un(event, fn);\n                  }, 0);\n                };\n\n                return this.on(event, fn);\n              }\n              /**\n               * Disable firing a list of events by name. When specified, event handlers for any event type\n               * passed in here will not be called.\n               *\n               * @since 4.0.0\n               * @param {string[]} eventNames an array of event names to disable emissions for\n               * @example\n               * // disable seek and interaction events\n               * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n               */\n\n            }, {\n              key: \"setDisabledEventEmissions\",\n              value: function setDisabledEventEmissions(eventNames) {\n                this._disabledEventEmissions = eventNames;\n              }\n              /**\n               * plugins borrow part of this class without calling the constructor,\n               * so we have to be careful about _disabledEventEmissions\n               */\n\n            }, {\n              key: \"_isDisabledEventEmission\",\n              value: function _isDisabledEventEmission(event) {\n                return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n              }\n              /**\n               * Manually fire an event\n               *\n               * @param {string} event The event to fire manually\n               * @param {...any} args The arguments with which to call the listeners\n               */\n\n            }, {\n              key: \"fireEvent\",\n              value: function fireEvent(event) {\n                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                  args[_key2 - 1] = arguments[_key2];\n                }\n\n                if (!this.handlers || this._isDisabledEventEmission(event)) {\n                  return;\n                }\n\n                var handlers = this.handlers[event];\n                handlers && handlers.forEach(function (fn) {\n                  fn.apply(void 0, args);\n                });\n              }\n            }]);\n\n            return Observer;\n          }();\n\n          exports[\"default\"] = Observer;\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/orientation.js\":\n        /*!*********************************!*\\\n          !*** ./src/util/orientation.js ***!\n          \\*********************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = withOrientation;\n          var verticalPropMap = {\n            width: 'height',\n            height: 'width',\n            overflowX: 'overflowY',\n            overflowY: 'overflowX',\n            clientWidth: 'clientHeight',\n            clientHeight: 'clientWidth',\n            clientX: 'clientY',\n            clientY: 'clientX',\n            scrollWidth: 'scrollHeight',\n            scrollLeft: 'scrollTop',\n            offsetLeft: 'offsetTop',\n            offsetTop: 'offsetLeft',\n            offsetHeight: 'offsetWidth',\n            offsetWidth: 'offsetHeight',\n            left: 'top',\n            right: 'bottom',\n            top: 'left',\n            bottom: 'right',\n            borderRightStyle: 'borderBottomStyle',\n            borderRightWidth: 'borderBottomWidth',\n            borderRightColor: 'borderBottomColor'\n          };\n          /**\n           * Convert a horizontally-oriented property name to a vertical one.\n           *\n           * @param {string} prop A property name\n           * @param {bool} vertical Whether the element is oriented vertically\n           * @returns {string} prop, converted appropriately\n           */\n\n          function mapProp(prop, vertical) {\n            if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\n              return vertical ? verticalPropMap[prop] : prop;\n            } else {\n              return prop;\n            }\n          }\n\n          var isProxy = Symbol(\"isProxy\");\n          /**\n           * Returns an appropriately oriented object based on vertical.\n           * If vertical is true, attribute getting and setting will be mapped through\n           * verticalPropMap, so that e.g. getting the object's .width will give its\n           * .height instead.\n           * Certain methods of an oriented object will return oriented objects as well.\n           * Oriented objects can't be added to the DOM directly since they are Proxy objects\n           * and thus fail typechecks. Use domElement to get the actual element for this.\n           *\n           * @param {object} target The object to be wrapped and oriented\n           * @param {bool} vertical Whether the element is oriented vertically\n           * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\n           * @since 5.0.0\n           */\n\n          function withOrientation(target, vertical) {\n            if (target[isProxy]) {\n              return target;\n            } else {\n              return new Proxy(target, {\n                get: function get(obj, prop, receiver) {\n                  if (prop === isProxy) {\n                    return true;\n                  } else if (prop === 'domElement') {\n                    return obj;\n                  } else if (prop === 'style') {\n                    return withOrientation(obj.style, vertical);\n                  } else if (prop === 'canvas') {\n                    return withOrientation(obj.canvas, vertical);\n                  } else if (prop === 'getBoundingClientRect') {\n                    return function () {\n                      return withOrientation(obj.getBoundingClientRect.apply(obj, arguments), vertical);\n                    };\n                  } else if (prop === 'getContext') {\n                    return function () {\n                      return withOrientation(obj.getContext.apply(obj, arguments), vertical);\n                    };\n                  } else {\n                    var value = obj[mapProp(prop, vertical)];\n                    return typeof value == 'function' ? value.bind(obj) : value;\n                  }\n                },\n                set: function set(obj, prop, value) {\n                  obj[mapProp(prop, vertical)] = value;\n                  return true;\n                }\n              });\n            }\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/prevent-click.js\":\n        /*!***********************************!*\\\n          !*** ./src/util/prevent-click.js ***!\n          \\***********************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = preventClick;\n          /**\n           * Stops propagation of click event and removes event listener\n           *\n           * @private\n           * @param {object} event The click event\n           */\n\n          function preventClickHandler(event) {\n            event.stopPropagation();\n            document.body.removeEventListener('click', preventClickHandler, true);\n          }\n          /**\n           * Starts listening for click event and prevent propagation\n           *\n           * @param {object} values Values\n           */\n\n\n          function preventClick(values) {\n            document.body.addEventListener('click', preventClickHandler, true);\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/request-animation-frame.js\":\n        /*!*********************************************!*\\\n          !*** ./src/util/request-animation-frame.js ***!\n          \\*********************************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n          /* eslint-disable valid-jsdoc */\n\n          /**\n           * Returns the `requestAnimationFrame` function for the browser, or a shim with\n           * `setTimeout` if the function is not found\n           *\n           * @return {function} Available `requestAnimationFrame` function for the browser\n           */\n\n          var _default = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback, element) {\n            return setTimeout(callback, 1000 / 60);\n          }).bind(window);\n\n          exports[\"default\"] = _default;\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/silence-mode.js\":\n        /*!**********************************!*\\\n          !*** ./src/util/silence-mode.js ***!\n          \\**********************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = ignoreSilenceMode;\n          /**\n           * Ignores device silence mode when using the `WebAudio` backend.\n           *\n           * Many mobile devices contain a hardware button to mute the ringtone for incoming\n           * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\n           * wavesurfer's audio when using the `WebAudio` backend. This function creates a\n           * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\n           * when muting the device ringer.\n           *\n           * @since 5.2.0\n           */\n\n          function ignoreSilenceMode() {\n            // Set the src to a short bit of url encoded as a silent mp3\n            // NOTE The silence MP3 must be high quality, when web audio sounds are played\n            // in parallel the web audio sound is mixed to match the bitrate of the html sound\n            // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n            var audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\"; // disable iOS Airplay (setting the attribute in js doesn't work)\n\n            var tmp = document.createElement(\"div\");\n            tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\n            var audioSilentMode = tmp.children.item(0);\n            audioSilentMode.src = audioData;\n            audioSilentMode.preload = \"auto\";\n            audioSilentMode.type = \"audio/mpeg\";\n            audioSilentMode.disableRemotePlayback = true; // play\n\n            audioSilentMode.play(); // cleanup\n\n            audioSilentMode.remove();\n            tmp.remove();\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/util/style.js\":\n        /*!***************************!*\\\n          !*** ./src/util/style.js ***!\n          \\***************************/\n\n        /***/\n        (module, exports) => {\n          \"use strict\";\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = style;\n          /**\n           * Apply a map of styles to an element\n           *\n           * @param {HTMLElement} el The element that the styles will be applied to\n           * @param {Object} styles The map of propName: attribute, both are used as-is\n           *\n           * @return {HTMLElement} el\n           */\n\n          function style(el, styles) {\n            Object.keys(styles).forEach(function (prop) {\n              if (el.style[prop] !== styles[prop]) {\n                el.style[prop] = styles[prop];\n              }\n            });\n            return el;\n          }\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/wavesurfer.js\":\n        /*!***************************!*\\\n          !*** ./src/wavesurfer.js ***!\n          \\***************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          function _typeof(obj) {\n            \"@babel/helpers - typeof\";\n\n            return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n              return typeof obj;\n            } : function (obj) {\n              return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            }, _typeof(obj);\n          }\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          var util = _interopRequireWildcard(__webpack_require__(\n          /*! ./util */\n          \"./src/util/index.js\"));\n\n          var _drawer = _interopRequireDefault(__webpack_require__(\n          /*! ./drawer.multicanvas */\n          \"./src/drawer.multicanvas.js\"));\n\n          var _webaudio = _interopRequireDefault(__webpack_require__(\n          /*! ./webaudio */\n          \"./src/webaudio.js\"));\n\n          var _mediaelement = _interopRequireDefault(__webpack_require__(\n          /*! ./mediaelement */\n          \"./src/mediaelement.js\"));\n\n          var _peakcache = _interopRequireDefault(__webpack_require__(\n          /*! ./peakcache */\n          \"./src/peakcache.js\"));\n\n          var _mediaelementWebaudio = _interopRequireDefault(__webpack_require__(\n          /*! ./mediaelement-webaudio */\n          \"./src/mediaelement-webaudio.js\"));\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : {\n              default: obj\n            };\n          }\n\n          function _getRequireWildcardCache(nodeInterop) {\n            if (typeof WeakMap !== \"function\") return null;\n            var cacheBabelInterop = new WeakMap();\n            var cacheNodeInterop = new WeakMap();\n            return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n              return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n            })(nodeInterop);\n          }\n\n          function _interopRequireWildcard(obj, nodeInterop) {\n            if (!nodeInterop && obj && obj.__esModule) {\n              return obj;\n            }\n\n            if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n              return {\n                default: obj\n              };\n            }\n\n            var cache = _getRequireWildcardCache(nodeInterop);\n\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n\n            var newObj = {};\n            var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n            for (var key in obj) {\n              if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n\n            newObj.default = obj;\n\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n\n            return newObj;\n          }\n\n          function _inherits(subClass, superClass) {\n            if (typeof superClass !== \"function\" && superClass !== null) {\n              throw new TypeError(\"Super expression must either be null or a function\");\n            }\n\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n              constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n              }\n            });\n            Object.defineProperty(subClass, \"prototype\", {\n              writable: false\n            });\n            if (superClass) _setPrototypeOf(subClass, superClass);\n          }\n\n          function _setPrototypeOf(o, p) {\n            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n              o.__proto__ = p;\n              return o;\n            };\n\n            return _setPrototypeOf(o, p);\n          }\n\n          function _createSuper(Derived) {\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n            return function _createSuperInternal() {\n              var Super = _getPrototypeOf(Derived),\n                  result;\n\n              if (hasNativeReflectConstruct) {\n                var NewTarget = _getPrototypeOf(this).constructor;\n\n                result = Reflect.construct(Super, arguments, NewTarget);\n              } else {\n                result = Super.apply(this, arguments);\n              }\n\n              return _possibleConstructorReturn(this, result);\n            };\n          }\n\n          function _possibleConstructorReturn(self, call) {\n            if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n              return call;\n            } else if (call !== void 0) {\n              throw new TypeError(\"Derived constructors may only return object or undefined\");\n            }\n\n            return _assertThisInitialized(self);\n          }\n\n          function _assertThisInitialized(self) {\n            if (self === void 0) {\n              throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            }\n\n            return self;\n          }\n\n          function _isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n\n            try {\n              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n              return true;\n            } catch (e) {\n              return false;\n            }\n          }\n\n          function _getPrototypeOf(o) {\n            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n              return o.__proto__ || Object.getPrototypeOf(o);\n            };\n            return _getPrototypeOf(o);\n          }\n\n          function _defineProperty(obj, key, value) {\n            if (key in obj) {\n              Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n              });\n            } else {\n              obj[key] = value;\n            }\n\n            return obj;\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n          /*\n           * This work is licensed under a BSD-3-Clause License.\n           */\n\n          /** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n\n          /** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n\n          /** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n\n          /** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n\n          /** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n\n          /** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n\n          /** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n          /**\n           * @typedef {Object} WavesurferParams\n           * @property {AudioContext} audioContext=null Use your own previously\n           * initialized AudioContext or leave blank.\n           * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n           * slower.\n           * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n           * initialized ScriptProcessorNode or leave blank.\n           * @property {boolean} autoCenter=true If a scrollbar is present, center the\n           * waveform on current progress\n           * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n           * waveform is centered\n           * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n           * center waveform on current progress\n           * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n           * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n           * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n           * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n           * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n           * also with audio with big duration. For example:\n           * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n           *   wavesurfer.play();\n           *   wavesurfer.setFilter(customFilter);\n           * `\n           * @property {string} backgroundColor=null Change background color of the\n           * waveform container.\n           * @property {number} barHeight=1 The height of the wave bars.\n           * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n           * @property {number} barGap=null The optional spacing between bars of the wave,\n           * if not provided will be calculated in legacy format.\n           * @property {number} barWidth=null Draw the waveform using bars.\n           * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n           * eliminating waveform gaps\n           * @property {boolean} closeAudioContext=false Close and nullify all audio\n           * contexts when the destroy method is called.\n           * @property {!string|HTMLElement} container CSS selector or HTML element where\n           * the waveform should be drawn. This is the only required parameter.\n           * @property {string} cursorColor='#333' The fill color of the cursor indicating\n           * the playhead position.\n           * @property {number} cursorWidth=1 Measured in pixels.\n           * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n           * attributes.\n           * @property {number} duration=null Optional audio length so pre-rendered peaks\n           * can be display immediately for example.\n           * @property {boolean} fillParent=true Whether to fill the entire container or\n           * draw only according to `minPxPerSec`.\n           * @property {boolean} forceDecode=false Force decoding of audio using web audio\n           * when zooming to get a more detailed waveform.\n           * @property {number} height=128 The height of the waveform. Measured in\n           * pixels.\n           * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n           * scrollbar when one would normally be shown.\n           * @property {boolean} hideCursor=false Whether to hide the mouse cursor\n           * when one would normally be shown by default.\n           * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\n           * when using the `WebAudio` backend.\n           * @property {boolean} interact=true Whether the mouse interaction will be\n           * enabled at initialization. You can switch this parameter at any time later\n           * on.\n           * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n           * looping of selected regions\n           * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n           * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n           * even integer). If the waveform is longer than this value, additional canvases\n           * will be used to render the waveform, which is useful for very large waveforms\n           * that may be too wide for browsers to draw on a single canvas.\n           * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n           * this enables the native controls for the media element\n           * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n           * `'audio'|'video'` ('video' only for `MediaElement`)\n           * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n           * audio.\n           * @property {boolean} normalize=false If true, normalize by the maximum peak\n           * instead of 1.0.\n           * @property {boolean} partialRender=false Use the PeakCache to improve\n           * rendering speed of large waveforms\n           * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n           * calculate display\n           * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n           * register during instantiation, they will be directly initialised unless they\n           * are added with the `deferInit` property set to true.\n           * @property {string} progressColor='#555' The fill color of the part of the\n           * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n           * the progress wave is not rendered at all.\n           * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n           * media element in the DOM when the player is destroyed. This is useful when\n           * reusing an existing media element via the `loadMediaElement` method.\n           * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n           * renderer.\n           * @property {boolean|number} responsive=false If set to `true` resize the\n           * waveform, when the window is resized. This is debounced with a `100ms`\n           * timeout by default. If this parameter is a number it represents that timeout.\n           * @property {boolean} rtl=false If set to `true`, renders waveform from\n           * right-to-left.\n           * @property {boolean} scrollParent=false Whether to scroll the container with a\n           * lengthy waveform. Otherwise the waveform is shrunk to the container width\n           * (see fillParent).\n           * @property {number} skipLength=2 Number of seconds to skip with the\n           * skipForward() and skipBackward() methods.\n           * @property {boolean} splitChannels=false Render with separate waveforms for\n           * the channels of the audio\n           * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\n           * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\n           * @property {string} waveColor='#999' The fill color of the waveform after the\n           * cursor.\n           * @property {object} xhr={} XHR options. For example:\n           * `let xhr = {\n           *     cache: 'default',\n           *     mode: 'cors',\n           *     method: 'GET',\n           *     credentials: 'same-origin',\n           *     redirect: 'follow',\n           *     referrer: 'client',\n           *     requestHeaders: [\n           *         {\n           *             key: 'Authorization',\n           *             value: 'my-token'\n           *         }\n           *     ]\n           * };`\n           */\n\n          /**\n           * @typedef {Object} PluginDefinition\n           * @desc The Object used to describe a plugin\n           * @example wavesurfer.addPlugin(pluginDefinition);\n           * @property {string} name The name of the plugin, the plugin instance will be\n           * added as a property to the wavesurfer instance under this name\n           * @property {?Object} staticProps The properties that should be added to the\n           * wavesurfer instance as static properties\n           * @property {?boolean} deferInit Don't initialise plugin\n           * automatically\n           * @property {Object} params={} The plugin parameters, they are the first parameter\n           * passed to the plugin class constructor function\n           * @property {PluginClass} instance The plugin instance factory, is called with\n           * the dependency specified in extends. Returns the plugin class.\n           */\n\n          /**\n           * @typedef {Object} SplitChannelOptions\n           * @desc parameters applied when splitChannels option is true\n           * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\n           * @property {object} channelColors={} object describing color for each channel. Example:\n           * {\n           *     0: {\n           *         progressColor: 'green',\n           *         waveColor: 'pink'\n           *     },\n           *     1: {\n           *         progressColor: 'orange',\n           *         waveColor: 'purple'\n           *     }\n           * }\n           * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\n           * @property {boolean} relativeNormalization=false determines whether\n           * normalization is done per channel or maintains proportionality between\n           * channels. Only applied when normalize and splitChannels are both true.\n           * @since 4.3.0\n           */\n\n          /**\n           * @interface PluginClass\n           *\n           * @desc This is the interface which is implemented by all plugin classes. Note\n           * that this only turns into an observer after being passed through\n           * `wavesurfer.addPlugin`.\n           *\n           * @extends {Observer}\n           */\n\n\n          var PluginClass = /*#__PURE__*/function () {\n            /**\n             * Construct the plugin\n             *\n             * @param {Object} params={} The plugin params (specific to the plugin)\n             * @param {Object} ws The wavesurfer instance\n             */\n            function PluginClass(params, ws) {\n              _classCallCheck(this, PluginClass);\n            }\n            /**\n             * Initialise the plugin\n             *\n             * Start doing something. This is called by\n             * `wavesurfer.initPlugin(pluginName)`\n             */\n\n\n            _createClass(PluginClass, [{\n              key: \"create\",\n              value:\n              /**\n               * Plugin definition factory\n               *\n               * This function must be used to create a plugin definition which can be\n               * used by wavesurfer to correctly instantiate the plugin.\n               *\n               * It returns a `PluginDefinition` object representing the plugin.\n               *\n               * @param {Object} params={} The plugin params (specific to the plugin)\n               */\n              function create(params) {}\n            }, {\n              key: \"init\",\n              value: function init() {}\n              /**\n               * Destroy the plugin instance\n               *\n               * Stop doing something. This is called by\n               * `wavesurfer.destroyPlugin(pluginName)`\n               */\n\n            }, {\n              key: \"destroy\",\n              value: function destroy() {}\n            }]);\n\n            return PluginClass;\n          }();\n          /**\n           * WaveSurfer core library class\n           *\n           * @extends {Observer}\n           * @example\n           * const params = {\n           *   container: '#waveform',\n           *   waveColor: 'violet',\n           *   progressColor: 'purple'\n           * };\n           *\n           * // initialise like this\n           * const wavesurfer = WaveSurfer.create(params);\n           *\n           * // or like this ...\n           * const wavesurfer = new WaveSurfer(params);\n           * wavesurfer.init();\n           *\n           * // load audio file\n           * wavesurfer.load('example/media/demo.wav');\n           */\n\n\n          var WaveSurfer = /*#__PURE__*/function (_util$Observer) {\n            _inherits(WaveSurfer, _util$Observer);\n\n            var _super = _createSuper(WaveSurfer);\n            /**\n             * Initialise wavesurfer instance\n             *\n             * @param {WavesurferParams} params Instantiation options for wavesurfer\n             * @example\n             * const wavesurfer = new WaveSurfer(params);\n             * @returns {this} Wavesurfer instance\n             */\n\n\n            function WaveSurfer(params) {\n              var _this;\n\n              _classCallCheck(this, WaveSurfer);\n\n              _this = _super.call(this);\n              /**\n               * Extract relevant parameters (or defaults)\n               * @private\n               */\n\n              _defineProperty(_assertThisInitialized(_this), \"defaultParams\", {\n                audioContext: null,\n                audioScriptProcessor: null,\n                audioRate: 1,\n                autoCenter: true,\n                autoCenterRate: 5,\n                autoCenterImmediately: false,\n                backend: 'WebAudio',\n                backgroundColor: null,\n                barHeight: 1,\n                barRadius: 0,\n                barGap: null,\n                barMinHeight: null,\n                container: null,\n                cursorColor: '#333',\n                cursorWidth: 1,\n                dragSelection: true,\n                drawingContextAttributes: {\n                  // Boolean that hints the user agent to reduce the latency\n                  // by desynchronizing the canvas paint cycle from the event\n                  // loop\n                  desynchronized: false\n                },\n                duration: null,\n                fillParent: true,\n                forceDecode: false,\n                height: 128,\n                hideScrollbar: false,\n                hideCursor: false,\n                ignoreSilenceMode: false,\n                interact: true,\n                loopSelection: true,\n                maxCanvasWidth: 4000,\n                mediaContainer: null,\n                mediaControls: false,\n                mediaType: 'audio',\n                minPxPerSec: 20,\n                normalize: false,\n                partialRender: false,\n                pixelRatio: window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n                plugins: [],\n                progressColor: '#555',\n                removeMediaElementOnDestroy: true,\n                renderer: _drawer.default,\n                responsive: false,\n                rtl: false,\n                scrollParent: false,\n                skipLength: 2,\n                splitChannels: false,\n                splitChannelsOptions: {\n                  overlay: false,\n                  channelColors: {},\n                  filterChannels: [],\n                  relativeNormalization: false\n                },\n                vertical: false,\n                waveColor: '#999',\n                xhr: {}\n              });\n\n              _defineProperty(_assertThisInitialized(_this), \"backends\", {\n                MediaElement: _mediaelement.default,\n                WebAudio: _webaudio.default,\n                MediaElementWebAudio: _mediaelementWebaudio.default\n              });\n\n              _defineProperty(_assertThisInitialized(_this), \"util\", util);\n\n              _this.params = Object.assign({}, _this.defaultParams, params);\n              _this.params.splitChannelsOptions = Object.assign({}, _this.defaultParams.splitChannelsOptions, params.splitChannelsOptions);\n              /** @private */\n\n              _this.container = 'string' == typeof params.container ? document.querySelector(_this.params.container) : _this.params.container;\n\n              if (!_this.container) {\n                throw new Error('Container element not found');\n              }\n\n              if (_this.params.mediaContainer == null) {\n                /** @private */\n                _this.mediaContainer = _this.container;\n              } else if (typeof _this.params.mediaContainer == 'string') {\n                /** @private */\n                _this.mediaContainer = document.querySelector(_this.params.mediaContainer);\n              } else {\n                /** @private */\n                _this.mediaContainer = _this.params.mediaContainer;\n              }\n\n              if (!_this.mediaContainer) {\n                throw new Error('Media Container element not found');\n              }\n\n              if (_this.params.maxCanvasWidth <= 1) {\n                throw new Error('maxCanvasWidth must be greater than 1');\n              } else if (_this.params.maxCanvasWidth % 2 == 1) {\n                throw new Error('maxCanvasWidth must be an even number');\n              }\n\n              if (_this.params.rtl === true) {\n                if (_this.params.vertical === true) {\n                  util.style(_this.container, {\n                    transform: 'rotateX(180deg)'\n                  });\n                } else {\n                  util.style(_this.container, {\n                    transform: 'rotateY(180deg)'\n                  });\n                }\n              }\n\n              if (_this.params.backgroundColor) {\n                _this.setBackgroundColor(_this.params.backgroundColor);\n              }\n              /**\n               * @private Used to save the current volume when muting so we can\n               * restore once unmuted\n               * @type {number}\n               */\n\n\n              _this.savedVolume = 0;\n              /**\n               * @private The current muted state\n               * @type {boolean}\n               */\n\n              _this.isMuted = false;\n              /**\n               * @private Will hold a list of event descriptors that need to be\n               * canceled on subsequent loads of audio\n               * @type {Object[]}\n               */\n\n              _this.tmpEvents = [];\n              /**\n               * @private Holds any running audio downloads\n               * @type {Observer}\n               */\n\n              _this.currentRequest = null;\n              /** @private */\n\n              _this.arraybuffer = null;\n              /** @private */\n\n              _this.drawer = null;\n              /** @private */\n\n              _this.backend = null;\n              /** @private */\n\n              _this.peakCache = null; // cache constructor objects\n\n              if (typeof _this.params.renderer !== 'function') {\n                throw new Error('Renderer parameter is invalid');\n              }\n              /**\n               * @private The uninitialised Drawer class\n               */\n\n\n              _this.Drawer = _this.params.renderer;\n              /**\n               * @private The uninitialised Backend class\n               */\n              // Back compat\n\n              if (_this.params.backend == 'AudioElement') {\n                _this.params.backend = 'MediaElement';\n              }\n\n              if ((_this.params.backend == 'WebAudio' || _this.params.backend === 'MediaElementWebAudio') && !_webaudio.default.prototype.supportsWebAudio.call(null)) {\n                _this.params.backend = 'MediaElement';\n              }\n\n              _this.Backend = _this.backends[_this.params.backend];\n              /**\n               * @private map of plugin names that are currently initialised\n               */\n\n              _this.initialisedPluginList = {};\n              /** @private */\n\n              _this.isDestroyed = false;\n              /**\n               * Get the current ready status.\n               *\n               * @example const isReady = wavesurfer.isReady;\n               * @return {boolean}\n               */\n\n              _this.isReady = false; // responsive debounced event listener. If this.params.responsive is not\n              // set, this is never called. Use 100ms or this.params.responsive as\n              // timeout for the debounce function.\n\n              var prevWidth = 0;\n              _this._onResize = util.debounce(function () {\n                if (prevWidth != _this.drawer.wrapper.clientWidth && !_this.params.scrollParent) {\n                  prevWidth = _this.drawer.wrapper.clientWidth;\n\n                  if (prevWidth) {\n                    // redraw only if waveform container is rendered and has a width\n                    _this.drawer.fireEvent('redraw');\n                  }\n                }\n              }, typeof _this.params.responsive === 'number' ? _this.params.responsive : 100);\n              return _possibleConstructorReturn(_this, _assertThisInitialized(_this));\n            }\n            /**\n             * Initialise the wave\n             *\n             * @example\n             * var wavesurfer = new WaveSurfer(params);\n             * wavesurfer.init();\n             * @return {this} The wavesurfer instance\n             */\n\n\n            _createClass(WaveSurfer, [{\n              key: \"init\",\n              value: function init() {\n                this.registerPlugins(this.params.plugins);\n                this.createDrawer();\n                this.createBackend();\n                this.createPeakCache();\n                return this;\n              }\n              /**\n               * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n               * this function is called in the init function of wavesurfer\n               *\n               * @param {PluginDefinition[]} plugins An array of plugin definitions\n               * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n               * @return {this} The wavesurfer instance\n               */\n\n            }, {\n              key: \"registerPlugins\",\n              value: function registerPlugins(plugins) {\n                var _this2 = this; // first instantiate all the plugins\n\n\n                plugins.forEach(function (plugin) {\n                  return _this2.addPlugin(plugin);\n                }); // now run the init functions\n\n                plugins.forEach(function (plugin) {\n                  // call init function of the plugin if deferInit is falsey\n                  // in that case you would manually use initPlugins()\n                  if (!plugin.deferInit) {\n                    _this2.initPlugin(plugin.name);\n                  }\n                });\n                this.fireEvent('plugins-registered', plugins);\n                return this;\n              }\n              /**\n               * Get a map of plugin names that are currently initialised\n               *\n               * @example wavesurfer.getPlugins();\n               * @return {Object} Object with plugin names\n               */\n\n            }, {\n              key: \"getActivePlugins\",\n              value: function getActivePlugins() {\n                return this.initialisedPluginList;\n              }\n              /**\n               * Add a plugin object to wavesurfer\n               *\n               * @param {PluginDefinition} plugin A plugin definition\n               * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n               * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n               * @return {this} The wavesurfer instance\n               */\n\n            }, {\n              key: \"addPlugin\",\n              value: function addPlugin(plugin) {\n                var _this3 = this;\n\n                if (!plugin.name) {\n                  throw new Error('Plugin does not have a name!');\n                }\n\n                if (!plugin.instance) {\n                  throw new Error(\"Plugin \".concat(plugin.name, \" does not have an instance property!\"));\n                } // staticProps properties are applied to wavesurfer instance\n\n\n                if (plugin.staticProps) {\n                  Object.keys(plugin.staticProps).forEach(function (pluginStaticProp) {\n                    /**\n                     * Properties defined in a plugin definition's `staticProps` property are added as\n                     * staticProps properties of the WaveSurfer instance\n                     */\n                    _this3[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n                  });\n                }\n\n                var Instance = plugin.instance; // turn the plugin instance into an observer\n\n                var observerPrototypeKeys = Object.getOwnPropertyNames(util.Observer.prototype);\n                observerPrototypeKeys.forEach(function (key) {\n                  Instance.prototype[key] = util.Observer.prototype[key];\n                });\n                /**\n                 * Instantiated plugin classes are added as a property of the wavesurfer\n                 * instance\n                 * @type {Object}\n                 */\n\n                this[plugin.name] = new Instance(plugin.params || {}, this);\n                this.fireEvent('plugin-added', plugin.name);\n                return this;\n              }\n              /**\n               * Initialise a plugin\n               *\n               * @param {string} name A plugin name\n               * @emits WaveSurfer#plugin-initialised\n               * @example wavesurfer.initPlugin('minimap');\n               * @return {this} The wavesurfer instance\n               */\n\n            }, {\n              key: \"initPlugin\",\n              value: function initPlugin(name) {\n                if (!this[name]) {\n                  throw new Error(\"Plugin \".concat(name, \" has not been added yet!\"));\n                }\n\n                if (this.initialisedPluginList[name]) {\n                  // destroy any already initialised plugins\n                  this.destroyPlugin(name);\n                }\n\n                this[name].init();\n                this.initialisedPluginList[name] = true;\n                this.fireEvent('plugin-initialised', name);\n                return this;\n              }\n              /**\n               * Destroy a plugin\n               *\n               * @param {string} name A plugin name\n               * @emits WaveSurfer#plugin-destroyed\n               * @example wavesurfer.destroyPlugin('minimap');\n               * @returns {this} The wavesurfer instance\n               */\n\n            }, {\n              key: \"destroyPlugin\",\n              value: function destroyPlugin(name) {\n                if (!this[name]) {\n                  throw new Error(\"Plugin \".concat(name, \" has not been added yet and cannot be destroyed!\"));\n                }\n\n                if (!this.initialisedPluginList[name]) {\n                  throw new Error(\"Plugin \".concat(name, \" is not active and cannot be destroyed!\"));\n                }\n\n                if (typeof this[name].destroy !== 'function') {\n                  throw new Error(\"Plugin \".concat(name, \" does not have a destroy function!\"));\n                }\n\n                this[name].destroy();\n                delete this.initialisedPluginList[name];\n                this.fireEvent('plugin-destroyed', name);\n                return this;\n              }\n              /**\n               * Destroy all initialised plugins. Convenience function to use when\n               * wavesurfer is removed\n               *\n               * @private\n               */\n\n            }, {\n              key: \"destroyAllPlugins\",\n              value: function destroyAllPlugins() {\n                var _this4 = this;\n\n                Object.keys(this.initialisedPluginList).forEach(function (name) {\n                  return _this4.destroyPlugin(name);\n                });\n              }\n              /**\n               * Create the drawer and draw the waveform\n               *\n               * @private\n               * @emits WaveSurfer#drawer-created\n               */\n\n            }, {\n              key: \"createDrawer\",\n              value: function createDrawer() {\n                var _this5 = this;\n\n                this.drawer = new this.Drawer(this.container, this.params);\n                this.drawer.init();\n                this.fireEvent('drawer-created', this.drawer);\n\n                if (this.params.responsive !== false) {\n                  window.addEventListener('resize', this._onResize, true);\n                  window.addEventListener('orientationchange', this._onResize, true);\n                }\n\n                this.drawer.on('redraw', function () {\n                  _this5.drawBuffer();\n\n                  _this5.drawer.progress(_this5.backend.getPlayedPercents());\n                }); // Click-to-seek\n\n                this.drawer.on('click', function (e, progress) {\n                  setTimeout(function () {\n                    return _this5.seekTo(progress);\n                  }, 0);\n                }); // Relay the scroll event from the drawer\n\n                this.drawer.on('scroll', function (e) {\n                  if (_this5.params.partialRender) {\n                    _this5.drawBuffer();\n                  }\n\n                  _this5.fireEvent('scroll', e);\n                });\n              }\n              /**\n               * Create the backend\n               *\n               * @private\n               * @emits WaveSurfer#backend-created\n               */\n\n            }, {\n              key: \"createBackend\",\n              value: function createBackend() {\n                var _this6 = this;\n\n                if (this.backend) {\n                  this.backend.destroy();\n                }\n\n                this.backend = new this.Backend(this.params);\n                this.backend.init();\n                this.fireEvent('backend-created', this.backend);\n                this.backend.on('finish', function () {\n                  _this6.drawer.progress(_this6.backend.getPlayedPercents());\n\n                  _this6.fireEvent('finish');\n                });\n                this.backend.on('play', function () {\n                  return _this6.fireEvent('play');\n                });\n                this.backend.on('pause', function () {\n                  return _this6.fireEvent('pause');\n                });\n                this.backend.on('audioprocess', function (time) {\n                  _this6.drawer.progress(_this6.backend.getPlayedPercents());\n\n                  _this6.fireEvent('audioprocess', time);\n                }); // only needed for MediaElement and MediaElementWebAudio backend\n\n                if (this.params.backend === 'MediaElement' || this.params.backend === 'MediaElementWebAudio') {\n                  this.backend.on('seek', function () {\n                    _this6.drawer.progress(_this6.backend.getPlayedPercents());\n                  });\n                  this.backend.on('volume', function () {\n                    var newVolume = _this6.getVolume();\n\n                    _this6.fireEvent('volume', newVolume);\n\n                    if (_this6.backend.isMuted !== _this6.isMuted) {\n                      _this6.isMuted = _this6.backend.isMuted;\n\n                      _this6.fireEvent('mute', _this6.isMuted);\n                    }\n                  });\n                }\n              }\n              /**\n               * Create the peak cache\n               *\n               * @private\n               */\n\n            }, {\n              key: \"createPeakCache\",\n              value: function createPeakCache() {\n                if (this.params.partialRender) {\n                  this.peakCache = new _peakcache.default();\n                }\n              }\n              /**\n               * Get the duration of the audio clip\n               *\n               * @example const duration = wavesurfer.getDuration();\n               * @return {number} Duration in seconds\n               */\n\n            }, {\n              key: \"getDuration\",\n              value: function getDuration() {\n                return this.backend.getDuration();\n              }\n              /**\n               * Get the current playback position\n               *\n               * @example const currentTime = wavesurfer.getCurrentTime();\n               * @return {number} Playback position in seconds\n               */\n\n            }, {\n              key: \"getCurrentTime\",\n              value: function getCurrentTime() {\n                return this.backend.getCurrentTime();\n              }\n              /**\n               * Set the current play time in seconds.\n               *\n               * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n               * seconds, 60 means 1 minute\n               */\n\n            }, {\n              key: \"setCurrentTime\",\n              value: function setCurrentTime(seconds) {\n                if (seconds >= this.getDuration()) {\n                  this.seekTo(1);\n                } else {\n                  this.seekTo(seconds / this.getDuration());\n                }\n              }\n              /**\n               * Starts playback from the current position. Optional start and end\n               * measured in seconds can be used to set the range of audio to play.\n               *\n               * @param {?number} start Position to start at\n               * @param {?number} end Position to end at\n               * @emits WaveSurfer#interaction\n               * @return {Promise} Result of the backend play method\n               * @example\n               * // play from second 1 to 5\n               * wavesurfer.play(1, 5);\n               */\n\n            }, {\n              key: \"play\",\n              value: function play(start, end) {\n                var _this7 = this;\n\n                if (this.params.ignoreSilenceMode) {\n                  // ignores device hardware silence mode\n                  util.ignoreSilenceMode();\n                }\n\n                this.fireEvent('interaction', function () {\n                  return _this7.play(start, end);\n                });\n                return this.backend.play(start, end);\n              }\n              /**\n               * Set a point in seconds for playback to stop at.\n               *\n               * @param {number} position Position (in seconds) to stop at\n               * @version 3.3.0\n               */\n\n            }, {\n              key: \"setPlayEnd\",\n              value: function setPlayEnd(position) {\n                this.backend.setPlayEnd(position);\n              }\n              /**\n               * Stops and pauses playback\n               *\n               * @example wavesurfer.pause();\n               * @return {Promise} Result of the backend pause method\n               */\n\n            }, {\n              key: \"pause\",\n              value: function pause() {\n                if (!this.backend.isPaused()) {\n                  return this.backend.pause();\n                }\n              }\n              /**\n               * Toggle playback\n               *\n               * @example wavesurfer.playPause();\n               * @return {Promise} Result of the backend play or pause method\n               */\n\n            }, {\n              key: \"playPause\",\n              value: function playPause() {\n                return this.backend.isPaused() ? this.play() : this.pause();\n              }\n              /**\n               * Get the current playback state\n               *\n               * @example const isPlaying = wavesurfer.isPlaying();\n               * @return {boolean} False if paused, true if playing\n               */\n\n            }, {\n              key: \"isPlaying\",\n              value: function isPlaying() {\n                return !this.backend.isPaused();\n              }\n              /**\n               * Skip backward\n               *\n               * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n               * is used\n               * @example wavesurfer.skipBackward();\n               */\n\n            }, {\n              key: \"skipBackward\",\n              value: function skipBackward(seconds) {\n                this.skip(-seconds || -this.params.skipLength);\n              }\n              /**\n               * Skip forward\n               *\n               * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n               * is used\n               * @example wavesurfer.skipForward();\n               */\n\n            }, {\n              key: \"skipForward\",\n              value: function skipForward(seconds) {\n                this.skip(seconds || this.params.skipLength);\n              }\n              /**\n               * Skip a number of seconds from the current position (use a negative value\n               * to go backwards).\n               *\n               * @param {number} offset Amount to skip back or forwards\n               * @example\n               * // go back 2 seconds\n               * wavesurfer.skip(-2);\n               */\n\n            }, {\n              key: \"skip\",\n              value: function skip(offset) {\n                var duration = this.getDuration() || 1;\n                var position = this.getCurrentTime() || 0;\n                position = Math.max(0, Math.min(duration, position + (offset || 0)));\n                this.seekAndCenter(position / duration);\n              }\n              /**\n               * Seeks to a position and centers the view\n               *\n               * @param {number} progress Between 0 (=beginning) and 1 (=end)\n               * @example\n               * // seek and go to the middle of the audio\n               * wavesurfer.seekTo(0.5);\n               */\n\n            }, {\n              key: \"seekAndCenter\",\n              value: function seekAndCenter(progress) {\n                this.seekTo(progress);\n                this.drawer.recenter(progress);\n              }\n              /**\n               * Seeks to a position\n               *\n               * @param {number} progress Between 0 (=beginning) and 1 (=end)\n               * @emits WaveSurfer#interaction\n               * @emits WaveSurfer#seek\n               * @example\n               * // seek to the middle of the audio\n               * wavesurfer.seekTo(0.5);\n               */\n\n            }, {\n              key: \"seekTo\",\n              value: function seekTo(progress) {\n                var _this8 = this; // return an error if progress is not a number between 0 and 1\n\n\n                if (typeof progress !== 'number' || !isFinite(progress) || progress < 0 || progress > 1) {\n                  throw new Error('Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!');\n                }\n\n                this.fireEvent('interaction', function () {\n                  return _this8.seekTo(progress);\n                });\n                var isWebAudioBackend = this.params.backend === 'WebAudio';\n                var paused = this.backend.isPaused();\n\n                if (isWebAudioBackend && !paused) {\n                  this.backend.pause();\n                } // avoid small scrolls while paused seeking\n\n\n                var oldScrollParent = this.params.scrollParent;\n                this.params.scrollParent = false;\n                this.backend.seekTo(progress * this.getDuration());\n                this.drawer.progress(progress);\n\n                if (isWebAudioBackend && !paused) {\n                  this.backend.play();\n                }\n\n                this.params.scrollParent = oldScrollParent;\n                this.fireEvent('seek', progress);\n              }\n              /**\n               * Stops and goes to the beginning.\n               *\n               * @example wavesurfer.stop();\n               */\n\n            }, {\n              key: \"stop\",\n              value: function stop() {\n                this.pause();\n                this.seekTo(0);\n                this.drawer.progress(0);\n              }\n              /**\n               * Sets the ID of the audio device to use for output and returns a Promise.\n               *\n               * @param {string} deviceId String value representing underlying output\n               * device\n               * @returns {Promise} `Promise` that resolves to `undefined` when there are\n               * no errors detected.\n               */\n\n            }, {\n              key: \"setSinkId\",\n              value: function setSinkId(deviceId) {\n                return this.backend.setSinkId(deviceId);\n              }\n              /**\n               * Set the playback volume.\n               *\n               * @param {number} newVolume A value between 0 and 1, 0 being no\n               * volume and 1 being full volume.\n               * @emits WaveSurfer#volume\n               */\n\n            }, {\n              key: \"setVolume\",\n              value: function setVolume(newVolume) {\n                this.backend.setVolume(newVolume);\n                this.fireEvent('volume', newVolume);\n              }\n              /**\n               * Get the playback volume.\n               *\n               * @return {number} A value between 0 and 1, 0 being no\n               * volume and 1 being full volume.\n               */\n\n            }, {\n              key: \"getVolume\",\n              value: function getVolume() {\n                return this.backend.getVolume();\n              }\n              /**\n               * Set the playback rate.\n               *\n               * @param {number} rate A positive number. E.g. 0.5 means half the normal\n               * speed, 2 means double speed and so on.\n               * @example wavesurfer.setPlaybackRate(2);\n               */\n\n            }, {\n              key: \"setPlaybackRate\",\n              value: function setPlaybackRate(rate) {\n                this.backend.setPlaybackRate(rate);\n              }\n              /**\n               * Get the playback rate.\n               *\n               * @return {number} The current playback rate.\n               */\n\n            }, {\n              key: \"getPlaybackRate\",\n              value: function getPlaybackRate() {\n                return this.backend.getPlaybackRate();\n              }\n              /**\n               * Toggle the volume on and off. If not currently muted it will save the\n               * current volume value and turn the volume off. If currently muted then it\n               * will restore the volume to the saved value, and then rest the saved\n               * value.\n               *\n               * @example wavesurfer.toggleMute();\n               */\n\n            }, {\n              key: \"toggleMute\",\n              value: function toggleMute() {\n                this.setMute(!this.isMuted);\n              }\n              /**\n               * Enable or disable muted audio\n               *\n               * @param {boolean} mute Specify `true` to mute audio.\n               * @emits WaveSurfer#volume\n               * @emits WaveSurfer#mute\n               * @example\n               * // unmute\n               * wavesurfer.setMute(false);\n               * console.log(wavesurfer.getMute()) // logs false\n               */\n\n            }, {\n              key: \"setMute\",\n              value: function setMute(mute) {\n                // ignore all muting requests if the audio is already in that state\n                if (mute === this.isMuted) {\n                  this.fireEvent('mute', this.isMuted);\n                  return;\n                }\n\n                if (this.backend.setMute) {\n                  // Backends such as the MediaElement backend have their own handling\n                  // of mute, let them handle it.\n                  this.backend.setMute(mute);\n                  this.isMuted = mute;\n                } else {\n                  if (mute) {\n                    // If currently not muted then save current volume,\n                    // turn off the volume and update the mute properties\n                    this.savedVolume = this.backend.getVolume();\n                    this.backend.setVolume(0);\n                    this.isMuted = true;\n                    this.fireEvent('volume', 0);\n                  } else {\n                    // If currently muted then restore to the saved volume\n                    // and update the mute properties\n                    this.backend.setVolume(this.savedVolume);\n                    this.isMuted = false;\n                    this.fireEvent('volume', this.savedVolume);\n                  }\n                }\n\n                this.fireEvent('mute', this.isMuted);\n              }\n              /**\n               * Get the current mute status.\n               *\n               * @example const isMuted = wavesurfer.getMute();\n               * @return {boolean} Current mute status\n               */\n\n            }, {\n              key: \"getMute\",\n              value: function getMute() {\n                return this.isMuted;\n              }\n              /**\n               * Get the list of current set filters as an array.\n               *\n               * Filters must be set with setFilters method first\n               *\n               * @return {array} List of enabled filters\n               */\n\n            }, {\n              key: \"getFilters\",\n              value: function getFilters() {\n                return this.backend.filters || [];\n              }\n              /**\n               * Toggles `scrollParent` and redraws\n               *\n               * @example wavesurfer.toggleScroll();\n               */\n\n            }, {\n              key: \"toggleScroll\",\n              value: function toggleScroll() {\n                this.params.scrollParent = !this.params.scrollParent;\n                this.drawBuffer();\n              }\n              /**\n               * Toggle mouse interaction\n               *\n               * @example wavesurfer.toggleInteraction();\n               */\n\n            }, {\n              key: \"toggleInteraction\",\n              value: function toggleInteraction() {\n                this.params.interact = !this.params.interact;\n              }\n              /**\n               * Get the fill color of the waveform after the cursor.\n               *\n               * @param {?number} channelIdx Optional index of the channel to get its wave color if splitChannels is true\n               * @return {string|object} A CSS color string, or an array of CSS color strings.\n               */\n\n            }, {\n              key: \"getWaveColor\",\n              value: function getWaveColor() {\n                var channelIdx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n                if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n                  return this.params.splitChannelsOptions.channelColors[channelIdx].waveColor;\n                }\n\n                return this.params.waveColor;\n              }\n              /**\n               * Set the fill color of the waveform after the cursor.\n               *\n               * @param {string|object} color A CSS color string, or an array of CSS color strings.\n               * @param {?number} channelIdx Optional index of the channel to set its wave color if splitChannels is true\n               * @example wavesurfer.setWaveColor('#ddd');\n               */\n\n            }, {\n              key: \"setWaveColor\",\n              value: function setWaveColor(color) {\n                var channelIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n                  this.params.splitChannelsOptions.channelColors[channelIdx].waveColor = color;\n                } else {\n                  this.params.waveColor = color;\n                }\n\n                this.drawBuffer();\n              }\n              /**\n               * Get the fill color of the waveform behind the cursor.\n               *\n               * @param {?number} channelIdx Optional index of the channel to get its progress color if splitChannels is true\n               * @return {string|object} A CSS color string, or an array of CSS color strings.\n               */\n\n            }, {\n              key: \"getProgressColor\",\n              value: function getProgressColor() {\n                var channelIdx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n                if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n                  return this.params.splitChannelsOptions.channelColors[channelIdx].progressColor;\n                }\n\n                return this.params.progressColor;\n              }\n              /**\n               * Set the fill color of the waveform behind the cursor.\n               *\n               * @param {string|object} color A CSS color string, or an array of CSS color strings.\n               * @param {?number} channelIdx Optional index of the channel to set its progress color if splitChannels is true\n               * @example wavesurfer.setProgressColor('#400');\n               */\n\n            }, {\n              key: \"setProgressColor\",\n              value: function setProgressColor(color, channelIdx) {\n                if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n                  this.params.splitChannelsOptions.channelColors[channelIdx].progressColor = color;\n                } else {\n                  this.params.progressColor = color;\n                }\n\n                this.drawBuffer();\n              }\n              /**\n               * Get the background color of the waveform container.\n               *\n               * @return {string} A CSS color string.\n               */\n\n            }, {\n              key: \"getBackgroundColor\",\n              value: function getBackgroundColor() {\n                return this.params.backgroundColor;\n              }\n              /**\n               * Set the background color of the waveform container.\n               *\n               * @param {string} color A CSS color string.\n               * @example wavesurfer.setBackgroundColor('#FF00FF');\n               */\n\n            }, {\n              key: \"setBackgroundColor\",\n              value: function setBackgroundColor(color) {\n                this.params.backgroundColor = color;\n                util.style(this.container, {\n                  background: this.params.backgroundColor\n                });\n              }\n              /**\n               * Get the fill color of the cursor indicating the playhead\n               * position.\n               *\n               * @return {string} A CSS color string.\n               */\n\n            }, {\n              key: \"getCursorColor\",\n              value: function getCursorColor() {\n                return this.params.cursorColor;\n              }\n              /**\n               * Set the fill color of the cursor indicating the playhead\n               * position.\n               *\n               * @param {string} color A CSS color string.\n               * @example wavesurfer.setCursorColor('#222');\n               */\n\n            }, {\n              key: \"setCursorColor\",\n              value: function setCursorColor(color) {\n                this.params.cursorColor = color;\n                this.drawer.updateCursor();\n              }\n              /**\n               * Get the height of the waveform.\n               *\n               * @return {number} Height measured in pixels.\n               */\n\n            }, {\n              key: \"getHeight\",\n              value: function getHeight() {\n                return this.params.height;\n              }\n              /**\n               * Set the height of the waveform.\n               *\n               * @param {number} height Height measured in pixels.\n               * @example wavesurfer.setHeight(200);\n               */\n\n            }, {\n              key: \"setHeight\",\n              value: function setHeight(height) {\n                this.params.height = height;\n                this.drawer.setHeight(height * this.params.pixelRatio);\n                this.drawBuffer();\n              }\n              /**\n               * Hide channels from being drawn on the waveform if splitting channels.\n               *\n               * For example, if we want to draw only the peaks for the right stereo channel:\n               *\n               * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n               * wavesurfer.load('stereo_audio.mp3');\n               *\n               * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n               *\n               * @param {array} channelIndices Channels to be filtered out from drawing.\n               * @version 4.0.0\n               */\n\n            }, {\n              key: \"setFilteredChannels\",\n              value: function setFilteredChannels(channelIndices) {\n                this.params.splitChannelsOptions.filterChannels = channelIndices;\n                this.drawBuffer();\n              }\n              /**\n               * Get the correct peaks for current wave view-port and render wave\n               *\n               * @private\n               * @emits WaveSurfer#redraw\n               */\n\n            }, {\n              key: \"drawBuffer\",\n              value: function drawBuffer() {\n                var nominalWidth = Math.round(this.getDuration() * this.params.minPxPerSec * this.params.pixelRatio);\n                var parentWidth = this.drawer.getWidth();\n                var width = nominalWidth; // always start at 0 after zooming for scrolling : issue redraw left part\n\n                var start = 0;\n                var end = Math.max(start + parentWidth, width); // Fill container\n\n                if (this.params.fillParent && (!this.params.scrollParent || nominalWidth < parentWidth)) {\n                  width = parentWidth;\n                  start = 0;\n                  end = width;\n                }\n\n                var peaks;\n\n                if (this.params.partialRender) {\n                  var newRanges = this.peakCache.addRangeToPeakCache(width, start, end);\n                  var i;\n\n                  for (i = 0; i < newRanges.length; i++) {\n                    peaks = this.backend.getPeaks(width, newRanges[i][0], newRanges[i][1]);\n                    this.drawer.drawPeaks(peaks, width, newRanges[i][0], newRanges[i][1]);\n                  }\n                } else {\n                  peaks = this.backend.getPeaks(width, start, end);\n                  this.drawer.drawPeaks(peaks, width, start, end);\n                }\n\n                this.fireEvent('redraw', peaks, width);\n              }\n              /**\n               * Horizontally zooms the waveform in and out. It also changes the parameter\n               * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n               * with a falsey parameter will reset the zoom state.\n               *\n               * @param {?number} pxPerSec Number of horizontal pixels per second of\n               * audio, if none is set the waveform returns to unzoomed state\n               * @emits WaveSurfer#zoom\n               * @example wavesurfer.zoom(20);\n               */\n\n            }, {\n              key: \"zoom\",\n              value: function zoom(pxPerSec) {\n                if (!pxPerSec) {\n                  this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n                  this.params.scrollParent = false;\n                } else {\n                  this.params.minPxPerSec = pxPerSec;\n                  this.params.scrollParent = true;\n                }\n\n                this.drawBuffer();\n                this.drawer.progress(this.backend.getPlayedPercents());\n                this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n                this.fireEvent('zoom', pxPerSec);\n              }\n              /**\n               * Decode buffer and load\n               *\n               * @private\n               * @param {ArrayBuffer} arraybuffer Buffer to process\n               */\n\n            }, {\n              key: \"loadArrayBuffer\",\n              value: function loadArrayBuffer(arraybuffer) {\n                var _this9 = this;\n\n                this.decodeArrayBuffer(arraybuffer, function (data) {\n                  if (!_this9.isDestroyed) {\n                    _this9.loadDecodedBuffer(data);\n                  }\n                });\n              }\n              /**\n               * Directly load an externally decoded AudioBuffer\n               *\n               * @private\n               * @param {AudioBuffer} buffer Buffer to process\n               * @emits WaveSurfer#ready\n               */\n\n            }, {\n              key: \"loadDecodedBuffer\",\n              value: function loadDecodedBuffer(buffer) {\n                this.backend.load(buffer);\n                this.drawBuffer();\n                this.isReady = true;\n                this.fireEvent('ready');\n              }\n              /**\n               * Loads audio data from a Blob or File object\n               *\n               * @param {Blob|File} blob Audio data\n               * @example\n               */\n\n            }, {\n              key: \"loadBlob\",\n              value: function loadBlob(blob) {\n                var _this10 = this; // Create file reader\n\n\n                var reader = new FileReader();\n                reader.addEventListener('progress', function (e) {\n                  return _this10.onProgress(e);\n                });\n                reader.addEventListener('load', function (e) {\n                  return _this10.loadArrayBuffer(e.target.result);\n                });\n                reader.addEventListener('error', function () {\n                  return _this10.fireEvent('error', 'Error reading file');\n                });\n                reader.readAsArrayBuffer(blob);\n                this.empty();\n              }\n              /**\n               * Loads audio and re-renders the waveform.\n               *\n               * @param {string|HTMLMediaElement} url The url of the audio file or the\n               * audio element with the audio\n               * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n               * the audio to render the waveform if this is specified\n               * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n               * `'none'|'metadata'|'auto'` Preload attribute for the media element\n               * @param {?number} duration The duration of the audio. This is used to\n               * render the peaks data in the correct size for the audio duration (as\n               * befits the current `minPxPerSec` and zoom value) without having to decode\n               * the audio.\n               * @returns {void}\n               * @throws Will throw an error if the `url` argument is empty.\n               * @example\n               * // uses fetch or media element to load file (depending on backend)\n               * wavesurfer.load('http://example.com/demo.wav');\n               *\n               * // setting preload attribute with media element backend and supplying\n               * // peaks\n               * wavesurfer.load(\n               *   'http://example.com/demo.wav',\n               *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n               *   true\n               * );\n               */\n\n            }, {\n              key: \"load\",\n              value: function load(url, peaks, preload, duration) {\n                if (!url) {\n                  throw new Error('url parameter cannot be empty');\n                }\n\n                this.empty();\n\n                if (preload) {\n                  // check whether the preload attribute will be usable and if not log\n                  // a warning listing the reasons why not and nullify the variable\n                  var preloadIgnoreReasons = {\n                    \"Preload is not 'auto', 'none' or 'metadata'\": ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                    'Peaks are not provided': !peaks,\n                    \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\": ['MediaElement', 'MediaElementWebAudio'].indexOf(this.params.backend) === -1,\n                    'Url is not of type string': typeof url !== 'string'\n                  };\n                  var activeReasons = Object.keys(preloadIgnoreReasons).filter(function (reason) {\n                    return preloadIgnoreReasons[reason];\n                  });\n\n                  if (activeReasons.length) {\n                    // eslint-disable-next-line no-console\n                    console.warn('Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' + activeReasons.join('\\n\\t- ')); // stop invalid values from being used\n\n                    preload = null;\n                  }\n                } // loadBuffer(url, peaks, duration) requires that url is a string\n                // but users can pass in a HTMLMediaElement to WaveSurfer\n\n\n                if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\n                  url = url.src;\n                }\n\n                switch (this.params.backend) {\n                  case 'WebAudio':\n                    return this.loadBuffer(url, peaks, duration);\n\n                  case 'MediaElement':\n                  case 'MediaElementWebAudio':\n                    return this.loadMediaElement(url, peaks, preload, duration);\n                }\n              }\n              /**\n               * Loads audio using Web Audio buffer backend.\n               *\n               * @private\n               * @emits WaveSurfer#waveform-ready\n               * @param {string} url URL of audio file\n               * @param {number[]|Number.<Array[]>} peaks Peaks data\n               * @param {?number} duration Optional duration of audio file\n               * @returns {void}\n               */\n\n            }, {\n              key: \"loadBuffer\",\n              value: function loadBuffer(url, peaks, duration) {\n                var _this11 = this;\n\n                var load = function load(action) {\n                  if (action) {\n                    _this11.tmpEvents.push(_this11.once('ready', action));\n                  }\n\n                  return _this11.getArrayBuffer(url, function (data) {\n                    return _this11.loadArrayBuffer(data);\n                  });\n                };\n\n                if (peaks) {\n                  this.backend.setPeaks(peaks, duration);\n                  this.drawBuffer();\n                  this.fireEvent('waveform-ready');\n                  this.tmpEvents.push(this.once('interaction', load));\n                } else {\n                  return load();\n                }\n              }\n              /**\n               * Either create a media element, or load an existing media element.\n               *\n               * @private\n               * @emits WaveSurfer#waveform-ready\n               * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n               * existing HTML5 Audio/Video Element\n               * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n               * dependency\n               * @param {?boolean} preload Set to true if the preload attribute of the\n               * audio element should be enabled\n               * @param {?number} duration Optional duration of audio file\n               */\n\n            }, {\n              key: \"loadMediaElement\",\n              value: function loadMediaElement(urlOrElt, peaks, preload, duration) {\n                var _this12 = this;\n\n                var url = urlOrElt;\n\n                if (typeof urlOrElt === 'string') {\n                  this.backend.load(url, this.mediaContainer, peaks, preload);\n                } else {\n                  var elt = urlOrElt;\n                  this.backend.loadElt(elt, peaks); // If peaks are not provided,\n                  // url = element.src so we can get peaks with web audio\n\n                  url = elt.src;\n                }\n\n                this.tmpEvents.push(this.backend.once('canplay', function () {\n                  // ignore when backend was already destroyed\n                  if (!_this12.backend.destroyed) {\n                    _this12.drawBuffer();\n\n                    _this12.isReady = true;\n\n                    _this12.fireEvent('ready');\n                  }\n                }), this.backend.once('error', function (err) {\n                  return _this12.fireEvent('error', err);\n                })); // If peaks are provided, render them and fire the `waveform-ready` event.\n\n                if (peaks) {\n                  this.backend.setPeaks(peaks, duration);\n                  this.drawBuffer();\n                  this.fireEvent('waveform-ready');\n                } // If no pre-decoded peaks are provided, or are provided with\n                // forceDecode flag, attempt to download the audio file and decode it\n                // with Web Audio.\n\n\n                if ((!peaks || this.params.forceDecode) && this.backend.supportsWebAudio()) {\n                  this.getArrayBuffer(url, function (arraybuffer) {\n                    _this12.decodeArrayBuffer(arraybuffer, function (buffer) {\n                      _this12.backend.buffer = buffer;\n\n                      _this12.backend.setPeaks(null);\n\n                      _this12.drawBuffer();\n\n                      _this12.fireEvent('waveform-ready');\n                    });\n                  });\n                }\n              }\n              /**\n               * Decode an array buffer and pass data to a callback\n               *\n               * @private\n               * @param {Object} arraybuffer The array buffer to decode\n               * @param {function} callback The function to call on complete\n               */\n\n            }, {\n              key: \"decodeArrayBuffer\",\n              value: function decodeArrayBuffer(arraybuffer, callback) {\n                var _this13 = this;\n\n                if (!this.isDestroyed) {\n                  this.arraybuffer = arraybuffer;\n                  this.backend.decodeArrayBuffer(arraybuffer, function (data) {\n                    // Only use the decoded data if we haven't been destroyed or\n                    // another decode started in the meantime\n                    if (!_this13.isDestroyed && _this13.arraybuffer == arraybuffer) {\n                      callback(data);\n                      _this13.arraybuffer = null;\n                    }\n                  }, function () {\n                    return _this13.fireEvent('error', 'Error decoding audiobuffer');\n                  });\n                }\n              }\n              /**\n               * Load an array buffer using fetch and pass the result to a callback\n               *\n               * @param {string} url The URL of the file object\n               * @param {function} callback The function to call on complete\n               * @returns {util.fetchFile} fetch call\n               * @private\n               */\n\n            }, {\n              key: \"getArrayBuffer\",\n              value: function getArrayBuffer(url, callback) {\n                var _this14 = this;\n\n                var options = Object.assign({\n                  url: url,\n                  responseType: 'arraybuffer'\n                }, this.params.xhr);\n                var request = util.fetchFile(options);\n                this.currentRequest = request;\n                this.tmpEvents.push(request.on('progress', function (e) {\n                  _this14.onProgress(e);\n                }), request.on('success', function (data) {\n                  callback(data);\n                  _this14.currentRequest = null;\n                }), request.on('error', function (e) {\n                  _this14.fireEvent('error', e);\n\n                  _this14.currentRequest = null;\n                }));\n                return request;\n              }\n              /**\n               * Called while the audio file is loading\n               *\n               * @private\n               * @param {Event} e Progress event\n               * @emits WaveSurfer#loading\n               */\n\n            }, {\n              key: \"onProgress\",\n              value: function onProgress(e) {\n                var percentComplete;\n\n                if (e.lengthComputable) {\n                  percentComplete = e.loaded / e.total;\n                } else {\n                  // Approximate progress with an asymptotic\n                  // function, and assume downloads in the 1-3 MB range.\n                  percentComplete = e.loaded / (e.loaded + 1000000);\n                }\n\n                this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n              }\n              /**\n               * Exports PCM data into a JSON array and optionally opens in a new window\n               * as valid JSON Blob instance.\n               *\n               * @param {number} length=1024 The scale in which to export the peaks\n               * @param {number} accuracy=10000\n               * @param {?boolean} noWindow Set to true to disable opening a new\n               * window with the JSON\n               * @param {number} start Start index\n               * @param {number} end End index\n               * @return {Promise} Promise that resolves with array of peaks\n               */\n\n            }, {\n              key: \"exportPCM\",\n              value: function exportPCM(length, accuracy, noWindow, start, end) {\n                length = length || 1024;\n                start = start || 0;\n                accuracy = accuracy || 10000;\n                noWindow = noWindow || false;\n                var peaks = this.backend.getPeaks(length, start, end);\n                var arr = [].map.call(peaks, function (val) {\n                  return Math.round(val * accuracy) / accuracy;\n                });\n                return new Promise(function (resolve, reject) {\n                  if (!noWindow) {\n                    var blobJSON = new Blob([JSON.stringify(arr)], {\n                      type: 'application/json;charset=utf-8'\n                    });\n                    var objURL = URL.createObjectURL(blobJSON);\n                    window.open(objURL);\n                    URL.revokeObjectURL(objURL);\n                  }\n\n                  resolve(arr);\n                });\n              }\n              /**\n               * Save waveform image as data URI.\n               *\n               * The default format is `'image/png'`. Other supported types are\n               * `'image/jpeg'` and `'image/webp'`.\n               *\n               * @param {string} format='image/png' A string indicating the image format.\n               * The default format type is `'image/png'`.\n               * @param {number} quality=1 A number between 0 and 1 indicating the image\n               * quality to use for image formats that use lossy compression such as\n               * `'image/jpeg'`` and `'image/webp'`.\n               * @param {string} type Image data type to return. Either 'dataURL' (default)\n               * or 'blob'.\n               * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n               * a single data URL or an array of data URLs, one for each canvas. When using\n               * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n               * instances, one for each canvas.\n               */\n\n            }, {\n              key: \"exportImage\",\n              value: function exportImage(format, quality, type) {\n                if (!format) {\n                  format = 'image/png';\n                }\n\n                if (!quality) {\n                  quality = 1;\n                }\n\n                if (!type) {\n                  type = 'dataURL';\n                }\n\n                return this.drawer.getImage(format, quality, type);\n              }\n              /**\n               * Cancel any fetch request currently in progress\n               */\n\n            }, {\n              key: \"cancelAjax\",\n              value: function cancelAjax() {\n                if (this.currentRequest && this.currentRequest.controller) {\n                  // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n                  // See: Wavesurfer issue #2042\n                  // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n                  if (this.currentRequest._reader) {\n                    // Ignoring exceptions thrown by call to cancel()\n                    this.currentRequest._reader.cancel().catch(function (err) {});\n                  }\n\n                  this.currentRequest.controller.abort();\n                  this.currentRequest = null;\n                }\n              }\n              /**\n               * @private\n               */\n\n            }, {\n              key: \"clearTmpEvents\",\n              value: function clearTmpEvents() {\n                this.tmpEvents.forEach(function (e) {\n                  return e.un();\n                });\n              }\n              /**\n               * Display empty waveform.\n               */\n\n            }, {\n              key: \"empty\",\n              value: function empty() {\n                if (!this.backend.isPaused()) {\n                  this.stop();\n                  this.backend.disconnectSource();\n                }\n\n                this.isReady = false;\n                this.cancelAjax();\n                this.clearTmpEvents(); // empty drawer\n\n                this.drawer.progress(0);\n                this.drawer.setWidth(0);\n                this.drawer.drawPeaks({\n                  length: this.drawer.getWidth()\n                }, 0);\n              }\n              /**\n               * Remove events, elements and disconnect WebAudio nodes.\n               *\n               * @emits WaveSurfer#destroy\n               */\n\n            }, {\n              key: \"destroy\",\n              value: function destroy() {\n                this.destroyAllPlugins();\n                this.fireEvent('destroy');\n                this.cancelAjax();\n                this.clearTmpEvents();\n                this.unAll();\n\n                if (this.params.responsive !== false) {\n                  window.removeEventListener('resize', this._onResize, true);\n                  window.removeEventListener('orientationchange', this._onResize, true);\n                }\n\n                if (this.backend) {\n                  this.backend.destroy(); // clears memory usage\n\n                  this.backend = null;\n                }\n\n                if (this.drawer) {\n                  this.drawer.destroy();\n                }\n\n                this.isDestroyed = true;\n                this.isReady = false;\n                this.arraybuffer = null;\n              }\n            }], [{\n              key: \"create\",\n              value:\n              /** @private */\n\n              /** @private */\n\n              /**\n               * Instantiate this class, call its `init` function and returns it\n               *\n               * @param {WavesurferParams} params The wavesurfer parameters\n               * @return {Object} WaveSurfer instance\n               * @example const wavesurfer = WaveSurfer.create(params);\n               */\n              function create(params) {\n                var wavesurfer = new WaveSurfer(params);\n                return wavesurfer.init();\n              }\n              /**\n               * The library version number is available as a static property of the\n               * WaveSurfer class\n               *\n               * @type {String}\n               * @example\n               * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n               */\n\n            }]);\n\n            return WaveSurfer;\n          }(util.Observer);\n\n          exports[\"default\"] = WaveSurfer;\n\n          _defineProperty(WaveSurfer, \"VERSION\", \"6.1.0\");\n\n          _defineProperty(WaveSurfer, \"util\", util);\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./src/webaudio.js\":\n        /*!*************************!*\\\n          !*** ./src/webaudio.js ***!\n          \\*************************/\n\n        /***/\n        (module, exports, __webpack_require__) => {\n          \"use strict\";\n\n          function _typeof(obj) {\n            \"@babel/helpers - typeof\";\n\n            return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n              return typeof obj;\n            } : function (obj) {\n              return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            }, _typeof(obj);\n          }\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true\n          });\n          exports[\"default\"] = void 0;\n\n          var util = _interopRequireWildcard(__webpack_require__(\n          /*! ./util */\n          \"./src/util/index.js\"));\n\n          function _getRequireWildcardCache(nodeInterop) {\n            if (typeof WeakMap !== \"function\") return null;\n            var cacheBabelInterop = new WeakMap();\n            var cacheNodeInterop = new WeakMap();\n            return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n              return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n            })(nodeInterop);\n          }\n\n          function _interopRequireWildcard(obj, nodeInterop) {\n            if (!nodeInterop && obj && obj.__esModule) {\n              return obj;\n            }\n\n            if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n              return {\n                default: obj\n              };\n            }\n\n            var cache = _getRequireWildcardCache(nodeInterop);\n\n            if (cache && cache.has(obj)) {\n              return cache.get(obj);\n            }\n\n            var newObj = {};\n            var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n            for (var key in obj) {\n              if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n                if (desc && (desc.get || desc.set)) {\n                  Object.defineProperty(newObj, key, desc);\n                } else {\n                  newObj[key] = obj[key];\n                }\n              }\n            }\n\n            newObj.default = obj;\n\n            if (cache) {\n              cache.set(obj, newObj);\n            }\n\n            return newObj;\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if (\"value\" in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            Object.defineProperty(Constructor, \"prototype\", {\n              writable: false\n            });\n            return Constructor;\n          }\n\n          function _inherits(subClass, superClass) {\n            if (typeof superClass !== \"function\" && superClass !== null) {\n              throw new TypeError(\"Super expression must either be null or a function\");\n            }\n\n            subClass.prototype = Object.create(superClass && superClass.prototype, {\n              constructor: {\n                value: subClass,\n                writable: true,\n                configurable: true\n              }\n            });\n            Object.defineProperty(subClass, \"prototype\", {\n              writable: false\n            });\n            if (superClass) _setPrototypeOf(subClass, superClass);\n          }\n\n          function _setPrototypeOf(o, p) {\n            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n              o.__proto__ = p;\n              return o;\n            };\n\n            return _setPrototypeOf(o, p);\n          }\n\n          function _createSuper(Derived) {\n            var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n            return function _createSuperInternal() {\n              var Super = _getPrototypeOf(Derived),\n                  result;\n\n              if (hasNativeReflectConstruct) {\n                var NewTarget = _getPrototypeOf(this).constructor;\n\n                result = Reflect.construct(Super, arguments, NewTarget);\n              } else {\n                result = Super.apply(this, arguments);\n              }\n\n              return _possibleConstructorReturn(this, result);\n            };\n          }\n\n          function _possibleConstructorReturn(self, call) {\n            if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n              return call;\n            } else if (call !== void 0) {\n              throw new TypeError(\"Derived constructors may only return object or undefined\");\n            }\n\n            return _assertThisInitialized(self);\n          }\n\n          function _assertThisInitialized(self) {\n            if (self === void 0) {\n              throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n            }\n\n            return self;\n          }\n\n          function _isNativeReflectConstruct() {\n            if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n            if (Reflect.construct.sham) return false;\n            if (typeof Proxy === \"function\") return true;\n\n            try {\n              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n              return true;\n            } catch (e) {\n              return false;\n            }\n          }\n\n          function _getPrototypeOf(o) {\n            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n              return o.__proto__ || Object.getPrototypeOf(o);\n            };\n            return _getPrototypeOf(o);\n          }\n\n          function _defineProperty(obj, key, value) {\n            if (key in obj) {\n              Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n              });\n            } else {\n              obj[key] = value;\n            }\n\n            return obj;\n          } // using constants to prevent someone writing the string wrong\n\n\n          var PLAYING = 'playing';\n          var PAUSED = 'paused';\n          var FINISHED = 'finished';\n          /**\n           * WebAudio backend\n           *\n           * @extends {Observer}\n           */\n\n          var WebAudio = /*#__PURE__*/function (_util$Observer) {\n            _inherits(WebAudio, _util$Observer);\n\n            var _super = _createSuper(WebAudio);\n            /**\n             * Construct the backend\n             *\n             * @param {WavesurferParams} params Wavesurfer parameters\n             */\n\n\n            function WebAudio(params) {\n              var _defineProperty2, _this$states;\n\n              var _this;\n\n              _classCallCheck(this, WebAudio);\n\n              _this = _super.call(this);\n              /** @private */\n\n              _defineProperty(_assertThisInitialized(_this), \"audioContext\", null);\n\n              _defineProperty(_assertThisInitialized(_this), \"offlineAudioContext\", null);\n\n              _defineProperty(_assertThisInitialized(_this), \"stateBehaviors\", (_defineProperty2 = {}, _defineProperty(_defineProperty2, PLAYING, {\n                init: function init() {\n                  this.addOnAudioProcess();\n                },\n                getPlayedPercents: function getPlayedPercents() {\n                  var duration = this.getDuration();\n                  return this.getCurrentTime() / duration || 0;\n                },\n                getCurrentTime: function getCurrentTime() {\n                  return this.startPosition + this.getPlayedTime();\n                }\n              }), _defineProperty(_defineProperty2, PAUSED, {\n                init: function init() {\n                  this.removeOnAudioProcess();\n                },\n                getPlayedPercents: function getPlayedPercents() {\n                  var duration = this.getDuration();\n                  return this.getCurrentTime() / duration || 0;\n                },\n                getCurrentTime: function getCurrentTime() {\n                  return this.startPosition;\n                }\n              }), _defineProperty(_defineProperty2, FINISHED, {\n                init: function init() {\n                  this.removeOnAudioProcess();\n                  this.fireEvent('finish');\n                },\n                getPlayedPercents: function getPlayedPercents() {\n                  return 1;\n                },\n                getCurrentTime: function getCurrentTime() {\n                  return this.getDuration();\n                }\n              }), _defineProperty2));\n\n              _this.params = params;\n              /** ac: Audio Context instance */\n\n              _this.ac = params.audioContext || (_this.supportsWebAudio() ? _this.getAudioContext() : {});\n              /**@private */\n\n              _this.lastPlay = _this.ac.currentTime;\n              /** @private */\n\n              _this.startPosition = 0;\n              /** @private */\n\n              _this.scheduledPause = null;\n              /** @private */\n\n              _this.states = (_this$states = {}, _defineProperty(_this$states, PLAYING, Object.create(_this.stateBehaviors[PLAYING])), _defineProperty(_this$states, PAUSED, Object.create(_this.stateBehaviors[PAUSED])), _defineProperty(_this$states, FINISHED, Object.create(_this.stateBehaviors[FINISHED])), _this$states);\n              /** @private */\n\n              _this.buffer = null;\n              /** @private */\n\n              _this.filters = [];\n              /** gainNode: allows to control audio volume */\n\n              _this.gainNode = null;\n              /** @private */\n\n              _this.mergedPeaks = null;\n              /** @private */\n\n              _this.offlineAc = null;\n              /** @private */\n\n              _this.peaks = null;\n              /** @private */\n\n              _this.playbackRate = 1;\n              /** analyser: provides audio analysis information */\n\n              _this.analyser = null;\n              /** scriptNode: allows processing audio */\n\n              _this.scriptNode = null;\n              /** @private */\n\n              _this.source = null;\n              /** @private */\n\n              _this.splitPeaks = [];\n              /** @private */\n\n              _this.state = null;\n              /** @private */\n\n              _this.explicitDuration = params.duration;\n              /** @private */\n\n              _this.sinkStreamDestination = null;\n              /** @private */\n\n              _this.sinkAudioElement = null;\n              /**\n               * Boolean indicating if the backend was destroyed.\n               */\n\n              _this.destroyed = false;\n              return _this;\n            }\n            /**\n             * Initialise the backend, called in `wavesurfer.createBackend()`\n             */\n\n\n            _createClass(WebAudio, [{\n              key: \"supportsWebAudio\",\n              value:\n              /** scriptBufferSize: size of the processing buffer */\n\n              /** audioContext: allows to process audio with WebAudio API */\n\n              /** @private */\n\n              /** @private */\n\n              /**\n               * Does the browser support this backend\n               *\n               * @return {boolean} Whether or not this browser supports this backend\n               */\n              function supportsWebAudio() {\n                return !!(window.AudioContext || window.webkitAudioContext);\n              }\n              /**\n               * Get the audio context used by this backend or create one\n               *\n               * @return {AudioContext} Existing audio context, or creates a new one\n               */\n\n            }, {\n              key: \"getAudioContext\",\n              value: function getAudioContext() {\n                if (!window.WaveSurferAudioContext) {\n                  window.WaveSurferAudioContext = new (window.AudioContext || window.webkitAudioContext)();\n                }\n\n                return window.WaveSurferAudioContext;\n              }\n              /**\n               * Get the offline audio context used by this backend or create one\n               *\n               * @param {number} sampleRate The sample rate to use\n               * @return {OfflineAudioContext} Existing offline audio context, or creates\n               * a new one\n               */\n\n            }, {\n              key: \"getOfflineAudioContext\",\n              value: function getOfflineAudioContext(sampleRate) {\n                if (!window.WaveSurferOfflineAudioContext) {\n                  window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext || window.webkitOfflineAudioContext)(1, 2, sampleRate);\n                }\n\n                return window.WaveSurferOfflineAudioContext;\n              }\n            }, {\n              key: \"init\",\n              value: function init() {\n                this.createVolumeNode();\n                this.createScriptNode();\n                this.createAnalyserNode();\n                this.setState(PAUSED);\n                this.setPlaybackRate(this.params.audioRate);\n                this.setLength(0);\n              }\n              /** @private */\n\n            }, {\n              key: \"disconnectFilters\",\n              value: function disconnectFilters() {\n                if (this.filters) {\n                  this.filters.forEach(function (filter) {\n                    filter && filter.disconnect();\n                  });\n                  this.filters = null; // Reconnect direct path\n\n                  this.analyser.connect(this.gainNode);\n                }\n              }\n              /**\n               * @private\n               *\n               * @param {string} state The new state\n               */\n\n            }, {\n              key: \"setState\",\n              value: function setState(state) {\n                if (this.state !== this.states[state]) {\n                  this.state = this.states[state];\n                  this.state.init.call(this);\n                }\n              }\n              /**\n               * Unpacked `setFilters()`\n               *\n               * @param {...AudioNode} filters One or more filters to set\n               */\n\n            }, {\n              key: \"setFilter\",\n              value: function setFilter() {\n                for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {\n                  filters[_key] = arguments[_key];\n                }\n\n                this.setFilters(filters);\n              }\n              /**\n               * Insert custom Web Audio nodes into the graph\n               *\n               * @param {AudioNode[]} filters Packed filters array\n               * @example\n               * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n               * wavesurfer.backend.setFilter(lowpass);\n               */\n\n            }, {\n              key: \"setFilters\",\n              value: function setFilters(filters) {\n                // Remove existing filters\n                this.disconnectFilters(); // Insert filters if filter array not empty\n\n                if (filters && filters.length) {\n                  this.filters = filters; // Disconnect direct path before inserting filters\n\n                  this.analyser.disconnect(); // Connect each filter in turn\n\n                  filters.reduce(function (prev, curr) {\n                    prev.connect(curr);\n                    return curr;\n                  }, this.analyser).connect(this.gainNode);\n                }\n              }\n              /** Create ScriptProcessorNode to process audio */\n\n            }, {\n              key: \"createScriptNode\",\n              value: function createScriptNode() {\n                if (this.params.audioScriptProcessor) {\n                  this.scriptNode = this.params.audioScriptProcessor;\n                } else {\n                  if (this.ac.createScriptProcessor) {\n                    this.scriptNode = this.ac.createScriptProcessor(WebAudio.scriptBufferSize);\n                  } else {\n                    this.scriptNode = this.ac.createJavaScriptNode(WebAudio.scriptBufferSize);\n                  }\n                }\n\n                this.scriptNode.connect(this.ac.destination);\n              }\n              /** @private */\n\n            }, {\n              key: \"addOnAudioProcess\",\n              value: function addOnAudioProcess() {\n                var _this2 = this;\n\n                this.scriptNode.onaudioprocess = function () {\n                  var time = _this2.getCurrentTime();\n\n                  if (time >= _this2.getDuration()) {\n                    _this2.setState(FINISHED);\n\n                    _this2.fireEvent('pause');\n                  } else if (time >= _this2.scheduledPause) {\n                    _this2.pause();\n                  } else if (_this2.state === _this2.states[PLAYING]) {\n                    _this2.fireEvent('audioprocess', time);\n                  }\n                };\n              }\n              /** @private */\n\n            }, {\n              key: \"removeOnAudioProcess\",\n              value: function removeOnAudioProcess() {\n                this.scriptNode.onaudioprocess = null;\n              }\n              /** Create analyser node to perform audio analysis */\n\n            }, {\n              key: \"createAnalyserNode\",\n              value: function createAnalyserNode() {\n                this.analyser = this.ac.createAnalyser();\n                this.analyser.connect(this.gainNode);\n              }\n              /**\n               * Create the gain node needed to control the playback volume.\n               *\n               */\n\n            }, {\n              key: \"createVolumeNode\",\n              value: function createVolumeNode() {\n                // Create gain node using the AudioContext\n                if (this.ac.createGain) {\n                  this.gainNode = this.ac.createGain();\n                } else {\n                  this.gainNode = this.ac.createGainNode();\n                } // Add the gain node to the graph\n\n\n                this.gainNode.connect(this.ac.destination);\n              }\n              /**\n               * Set the sink id for the media player\n               *\n               * @param {string} deviceId String value representing audio device id.\n               * @returns {Promise} A Promise that resolves to `undefined` when there\n               * are no errors.\n               */\n\n            }, {\n              key: \"setSinkId\",\n              value: function setSinkId(deviceId) {\n                if (deviceId) {\n                  /**\n                   * The webaudio API doesn't currently support setting the device\n                   * output. Here we create an HTMLAudioElement, connect the\n                   * webaudio stream to that element and setSinkId there.\n                   */\n                  if (!this.sinkAudioElement) {\n                    this.sinkAudioElement = new window.Audio(); // autoplay is necessary since we're not invoking .play()\n\n                    this.sinkAudioElement.autoplay = true;\n                  }\n\n                  if (!this.sinkAudioElement.setSinkId) {\n                    return Promise.reject(new Error('setSinkId is not supported in your browser'));\n                  }\n\n                  if (!this.sinkStreamDestination) {\n                    this.sinkStreamDestination = this.ac.createMediaStreamDestination();\n                  }\n\n                  this.gainNode.disconnect();\n                  this.gainNode.connect(this.sinkStreamDestination);\n                  this.sinkAudioElement.srcObject = this.sinkStreamDestination.stream;\n                  return this.sinkAudioElement.setSinkId(deviceId);\n                } else {\n                  return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n                }\n              }\n              /**\n               * Set the audio volume\n               *\n               * @param {number} value A floating point value between 0 and 1.\n               */\n\n            }, {\n              key: \"setVolume\",\n              value: function setVolume(value) {\n                this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n              }\n              /**\n               * Get the current volume\n               *\n               * @return {number} value A floating point value between 0 and 1.\n               */\n\n            }, {\n              key: \"getVolume\",\n              value: function getVolume() {\n                return this.gainNode.gain.value;\n              }\n              /**\n               * Decode an array buffer and pass data to a callback\n               *\n               * @private\n               * @param {ArrayBuffer} arraybuffer The array buffer to decode\n               * @param {function} callback The function to call on complete.\n               * @param {function} errback The function to call on error.\n               */\n\n            }, {\n              key: \"decodeArrayBuffer\",\n              value: function decodeArrayBuffer(arraybuffer, callback, errback) {\n                if (!this.offlineAc) {\n                  this.offlineAc = this.getOfflineAudioContext(this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100);\n                }\n\n                if ('webkitAudioContext' in window) {\n                  // Safari: no support for Promise-based decodeAudioData enabled\n                  // Enable it in Safari using the Experimental Features > Modern WebAudio API option\n                  this.offlineAc.decodeAudioData(arraybuffer, function (data) {\n                    return callback(data);\n                  }, errback);\n                } else {\n                  this.offlineAc.decodeAudioData(arraybuffer).then(function (data) {\n                    return callback(data);\n                  }).catch(function (err) {\n                    return errback(err);\n                  });\n                }\n              }\n              /**\n               * Set pre-decoded peaks\n               *\n               * @param {number[]|Number.<Array[]>} peaks Peaks data\n               * @param {?number} duration Explicit duration\n               */\n\n            }, {\n              key: \"setPeaks\",\n              value: function setPeaks(peaks, duration) {\n                if (duration != null) {\n                  this.explicitDuration = duration;\n                }\n\n                this.peaks = peaks;\n              }\n              /**\n               * Set the rendered length (different from the length of the audio)\n               *\n               * @param {number} length The rendered length\n               */\n\n            }, {\n              key: \"setLength\",\n              value: function setLength(length) {\n                // No resize, we can preserve the cached peaks.\n                if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n                  return;\n                }\n\n                this.splitPeaks = [];\n                this.mergedPeaks = []; // Set the last element of the sparse array so the peak arrays are\n                // appropriately sized for other calculations.\n\n                var channels = this.buffer ? this.buffer.numberOfChannels : 1;\n                var c;\n\n                for (c = 0; c < channels; c++) {\n                  this.splitPeaks[c] = [];\n                  this.splitPeaks[c][2 * (length - 1)] = 0;\n                  this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n                }\n\n                this.mergedPeaks[2 * (length - 1)] = 0;\n                this.mergedPeaks[2 * (length - 1) + 1] = 0;\n              }\n              /**\n               * Compute the max and min value of the waveform when broken into <length> subranges.\n               *\n               * @param {number} length How many subranges to break the waveform into.\n               * @param {number} first First sample in the required range.\n               * @param {number} last Last sample in the required range.\n               * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n               * peaks consisting of (max, min) values for each subrange.\n               */\n\n            }, {\n              key: \"getPeaks\",\n              value: function getPeaks(length, first, last) {\n                if (this.peaks) {\n                  return this.peaks;\n                }\n\n                if (!this.buffer) {\n                  return [];\n                }\n\n                first = first || 0;\n                last = last || length - 1;\n                this.setLength(length);\n\n                if (!this.buffer) {\n                  return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n                }\n                /**\n                 * The following snippet fixes a buffering data issue on the Safari\n                 * browser which returned undefined It creates the missing buffer based\n                 * on 1 channel, 4096 samples and the sampleRate from the current\n                 * webaudio context 4096 samples seemed to be the best fit for rendering\n                 * will review this code once a stable version of Safari TP is out\n                 */\n\n\n                if (!this.buffer.length) {\n                  var newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n                  this.buffer = newBuffer.buffer;\n                }\n\n                var sampleSize = this.buffer.length / length;\n                var sampleStep = ~~(sampleSize / 10) || 1;\n                var channels = this.buffer.numberOfChannels;\n                var c;\n\n                for (c = 0; c < channels; c++) {\n                  var peaks = this.splitPeaks[c];\n                  var chan = this.buffer.getChannelData(c);\n                  var i = void 0;\n\n                  for (i = first; i <= last; i++) {\n                    var start = ~~(i * sampleSize);\n                    var end = ~~(start + sampleSize);\n                    /**\n                     * Initialize the max and min to the first sample of this\n                     * subrange, so that even if the samples are entirely\n                     * on one side of zero, we still return the true max and\n                     * min values in the subrange.\n                     */\n\n                    var min = chan[start];\n                    var max = min;\n                    var j = void 0;\n\n                    for (j = start; j < end; j += sampleStep) {\n                      var value = chan[j];\n\n                      if (value > max) {\n                        max = value;\n                      }\n\n                      if (value < min) {\n                        min = value;\n                      }\n                    }\n\n                    peaks[2 * i] = max;\n                    peaks[2 * i + 1] = min;\n\n                    if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                      this.mergedPeaks[2 * i] = max;\n                    }\n\n                    if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                      this.mergedPeaks[2 * i + 1] = min;\n                    }\n                  }\n                }\n\n                return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n              }\n              /**\n               * Get the position from 0 to 1\n               *\n               * @return {number} Position\n               */\n\n            }, {\n              key: \"getPlayedPercents\",\n              value: function getPlayedPercents() {\n                return this.state.getPlayedPercents.call(this);\n              }\n              /** @private */\n\n            }, {\n              key: \"disconnectSource\",\n              value: function disconnectSource() {\n                if (this.source) {\n                  this.source.disconnect();\n                }\n              }\n              /**\n               * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n               */\n\n            }, {\n              key: \"destroyWebAudio\",\n              value: function destroyWebAudio() {\n                this.disconnectFilters();\n                this.disconnectSource();\n                this.gainNode.disconnect();\n                this.scriptNode.disconnect();\n                this.analyser.disconnect(); // close the audioContext if closeAudioContext option is set to true\n\n                if (this.params.closeAudioContext) {\n                  // check if browser supports AudioContext.close()\n                  if (typeof this.ac.close === 'function' && this.ac.state != 'closed') {\n                    this.ac.close();\n                  } // clear the reference to the audiocontext\n\n\n                  this.ac = null; // clear the actual audiocontext, either passed as param or the\n                  // global singleton\n\n                  if (!this.params.audioContext) {\n                    window.WaveSurferAudioContext = null;\n                  } else {\n                    this.params.audioContext = null;\n                  } // clear the offlineAudioContext\n\n\n                  window.WaveSurferOfflineAudioContext = null;\n                } // disconnect resources used by setSinkId\n\n\n                if (this.sinkStreamDestination) {\n                  this.sinkAudioElement.pause();\n                  this.sinkAudioElement.srcObject = null;\n                  this.sinkStreamDestination.disconnect();\n                  this.sinkStreamDestination = null;\n                }\n              }\n              /**\n               * This is called when wavesurfer is destroyed\n               */\n\n            }, {\n              key: \"destroy\",\n              value: function destroy() {\n                if (!this.isPaused()) {\n                  this.pause();\n                }\n\n                this.unAll();\n                this.buffer = null;\n                this.destroyed = true;\n                this.destroyWebAudio();\n              }\n              /**\n               * Loaded a decoded audio buffer\n               *\n               * @param {Object} buffer Decoded audio buffer to load\n               */\n\n            }, {\n              key: \"load\",\n              value: function load(buffer) {\n                this.startPosition = 0;\n                this.lastPlay = this.ac.currentTime;\n                this.buffer = buffer;\n                this.createSource();\n              }\n              /** @private */\n\n            }, {\n              key: \"createSource\",\n              value: function createSource() {\n                this.disconnectSource();\n                this.source = this.ac.createBufferSource(); // adjust for old browsers\n\n                this.source.start = this.source.start || this.source.noteGrainOn;\n                this.source.stop = this.source.stop || this.source.noteOff;\n                this.setPlaybackRate(this.playbackRate);\n                this.source.buffer = this.buffer;\n                this.source.connect(this.analyser);\n              }\n              /**\n               * @private\n               *\n               * some browsers require an explicit call to #resume before they will play back audio\n               */\n\n            }, {\n              key: \"resumeAudioContext\",\n              value: function resumeAudioContext() {\n                if (this.ac.state == 'suspended') {\n                  this.ac.resume && this.ac.resume();\n                }\n              }\n              /**\n               * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n               *\n               * @return {boolean} Whether or not this backend is currently paused\n               */\n\n            }, {\n              key: \"isPaused\",\n              value: function isPaused() {\n                return this.state !== this.states[PLAYING];\n              }\n              /**\n               * Used by `wavesurfer.getDuration()`\n               *\n               * @return {number} Duration of loaded buffer\n               */\n\n            }, {\n              key: \"getDuration\",\n              value: function getDuration() {\n                if (this.explicitDuration) {\n                  return this.explicitDuration;\n                }\n\n                if (!this.buffer) {\n                  return 0;\n                }\n\n                return this.buffer.duration;\n              }\n              /**\n               * Used by `wavesurfer.seekTo()`\n               *\n               * @param {number} start Position to start at in seconds\n               * @param {number} end Position to end at in seconds\n               * @return {{start: number, end: number}} Object containing start and end\n               * positions\n               */\n\n            }, {\n              key: \"seekTo\",\n              value: function seekTo(start, end) {\n                if (!this.buffer) {\n                  return;\n                }\n\n                this.scheduledPause = null;\n\n                if (start == null) {\n                  start = this.getCurrentTime();\n\n                  if (start >= this.getDuration()) {\n                    start = 0;\n                  }\n                }\n\n                if (end == null) {\n                  end = this.getDuration();\n                }\n\n                this.startPosition = start;\n                this.lastPlay = this.ac.currentTime;\n\n                if (this.state === this.states[FINISHED]) {\n                  this.setState(PAUSED);\n                }\n\n                return {\n                  start: start,\n                  end: end\n                };\n              }\n              /**\n               * Get the playback position in seconds\n               *\n               * @return {number} The playback position in seconds\n               */\n\n            }, {\n              key: \"getPlayedTime\",\n              value: function getPlayedTime() {\n                return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n              }\n              /**\n               * Plays the loaded audio region.\n               *\n               * @param {number} start Start offset in seconds, relative to the beginning\n               * of a clip.\n               * @param {number} end When to stop relative to the beginning of a clip.\n               */\n\n            }, {\n              key: \"play\",\n              value: function play(start, end) {\n                if (!this.buffer) {\n                  return;\n                } // need to re-create source on each playback\n\n\n                this.createSource();\n                var adjustedTime = this.seekTo(start, end);\n                start = adjustedTime.start;\n                end = adjustedTime.end;\n                this.scheduledPause = end;\n                this.source.start(0, start);\n                this.resumeAudioContext();\n                this.setState(PLAYING);\n                this.fireEvent('play');\n              }\n              /**\n               * Pauses the loaded audio.\n               */\n\n            }, {\n              key: \"pause\",\n              value: function pause() {\n                this.scheduledPause = null;\n                this.startPosition += this.getPlayedTime();\n\n                try {\n                  this.source && this.source.stop(0);\n                } catch (err) {// Calling stop can throw the following 2 errors:\n                  // - RangeError (The value specified for when is negative.)\n                  // - InvalidStateNode (The node has not been started by calling start().)\n                  // We can safely ignore both errors, because:\n                  // - The range is surely correct\n                  // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\n                }\n\n                this.setState(PAUSED);\n                this.fireEvent('pause');\n              }\n              /**\n               * Returns the current time in seconds relative to the audio-clip's\n               * duration.\n               *\n               * @return {number} The current time in seconds\n               */\n\n            }, {\n              key: \"getCurrentTime\",\n              value: function getCurrentTime() {\n                return this.state.getCurrentTime.call(this);\n              }\n              /**\n               * Returns the current playback rate. (0=no playback, 1=normal playback)\n               *\n               * @return {number} The current playback rate\n               */\n\n            }, {\n              key: \"getPlaybackRate\",\n              value: function getPlaybackRate() {\n                return this.playbackRate;\n              }\n              /**\n               * Set the audio source playback rate.\n               *\n               * @param {number} value The playback rate to use\n               */\n\n            }, {\n              key: \"setPlaybackRate\",\n              value: function setPlaybackRate(value) {\n                this.playbackRate = value || 1;\n                this.source && this.source.playbackRate.setValueAtTime(this.playbackRate, this.ac.currentTime);\n              }\n              /**\n               * Set a point in seconds for playback to stop at.\n               *\n               * @param {number} end Position to end at\n               * @version 3.3.0\n               */\n\n            }, {\n              key: \"setPlayEnd\",\n              value: function setPlayEnd(end) {\n                this.scheduledPause = end;\n              }\n            }]);\n\n            return WebAudio;\n          }(util.Observer);\n\n          exports[\"default\"] = WebAudio;\n\n          _defineProperty(WebAudio, \"scriptBufferSize\", 256);\n\n          module.exports = exports.default;\n          /***/\n        },\n\n        /***/\n        \"./node_modules/debounce/index.js\":\n        /*!****************************************!*\\\n          !*** ./node_modules/debounce/index.js ***!\n          \\****************************************/\n\n        /***/\n        module => {\n          /**\n           * Returns a function, that, as long as it continues to be invoked, will not\n           * be triggered. The function will be called after it stops being called for\n           * N milliseconds. If `immediate` is passed, trigger the function on the\n           * leading edge, instead of the trailing. The function also has a property 'clear' \n           * that is a function which will clear the timer to prevent previously scheduled executions. \n           *\n           * @source underscore.js\n           * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n           * @param {Function} function to wrap\n           * @param {Number} timeout in ms (`100`)\n           * @param {Boolean} whether to execute at the beginning (`false`)\n           * @api public\n           */\n          function debounce(func, wait, immediate) {\n            var timeout, args, context, timestamp, result;\n            if (null == wait) wait = 100;\n\n            function later() {\n              var last = Date.now() - timestamp;\n\n              if (last < wait && last >= 0) {\n                timeout = setTimeout(later, wait - last);\n              } else {\n                timeout = null;\n\n                if (!immediate) {\n                  result = func.apply(context, args);\n                  context = args = null;\n                }\n              }\n            }\n\n            ;\n\n            var debounced = function () {\n              context = this;\n              args = arguments;\n              timestamp = Date.now();\n              var callNow = immediate && !timeout;\n              if (!timeout) timeout = setTimeout(later, wait);\n\n              if (callNow) {\n                result = func.apply(context, args);\n                context = args = null;\n              }\n\n              return result;\n            };\n\n            debounced.clear = function () {\n              if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n              }\n            };\n\n            debounced.flush = function () {\n              if (timeout) {\n                result = func.apply(context, args);\n                context = args = null;\n                clearTimeout(timeout);\n                timeout = null;\n              }\n            };\n\n            return debounced;\n          }\n\n          ; // Adds compatibility for ES modules\n\n          debounce.debounce = debounce;\n          module.exports = debounce;\n          /***/\n        }\n        /******/\n\n      };\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n      /******/\n\n      /******/\n      // startup\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n      // This entry module is referenced by other modules so it can't be inlined\n\n      /******/\n\n\n      var __webpack_exports__ = __webpack_require__(\"./src/wavesurfer.js\");\n      /******/\n\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});","map":{"version":3,"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;cACM2X;AAYF;AACJ;AACA;AACA;AACA;AACA;AACI,iCAAYjY,MAAZ,EAAoBkY,EAApB,EAAwB;AAAAld;AAAE;AAC1B;AACJ;AACA;AACA;AACA;AACA;;;;;;AAvBI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,8BAAOgF,MAAP,EAAe,CAAE;;;qBAcjB,gBAAO,CAAE;AACT;AACJ;AACA;AACA;AACA;AACA;;;;qBACI,mBAAU,CAAE;;;;WAhCViY;AAmCN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;cACqBE;;;;AAiHjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,gCAAYnY,MAAZ,EAAoB;AAAA;;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","names":["module","define","exports","root","self","CanvasEntry","_classCallCheck","wave","waveCtx","progress","progressCtx","start","end","id","constructor","name","toLowerCase","canvasContextAttributes","element","getContext","elementWidth","totalWidth","width","height","offsetLeft","elementSize","hasProgressCanvas","clearRect","canvas","waveColor","progressColor","fillStyle","getFillStyle","ctx","color","CanvasGradient","waveGradient","createLinearGradient","forEach","value","index","addColorStop","length","vertical","setTransform","x","y","radius","fillRectToContext","drawRoundedRect","fillRect","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","peaks","absmax","halfH","offsetY","drawLineToContext","first","Math","round","last","canvasStart","canvasEnd","scale","halfOffset","absmaxHalf","i","peak","h","halfPixel","j","format","quality","type","Promise","_this","toBlob","resolve","toDataURL","Drawer","container","params","util","withOrientation","pixelRatio","lastPos","wrapper","el","styles","style","appendChild","document","createElement","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","cursor","hideCursor","overflowX","hideScrollbar","overflowY","setupWrapperEvents","e","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","nominalWidth","parentWidth","getWidth","progressPixels","getProgressPixels","scrollLeft","scrollWidth","clamp","wrapperBbox","rtl","right","left","addEventListener","orientedEvent","_this2","scrollbarHeight","offsetHeight","clientHeight","clientY","bottom","interact","fireEvent","handleEvent","setWidth","clearWave","barWidth","drawBars","drawWave","percent","recenterOnPosition","immediate","half","clientWidth","maxScroll","target","offset","rate","autoCenterRate","max","min","newWidth","updateSize","minPxDelta","pos","autoCenter","newPos","autoCenterImmediately","updateProgress","unAll","parentNode","domElement","removeChild","channelIndex","Observer","MultiCanvas","maxCanvasWidth","maxCanvasElementWidth","canvases","progressWave","EntryClass","drawingContextAttributes","overlap","ceil","barRadius","createWrapper","createElements","zIndex","top","overflow","boxSizing","borderRightStyle","pointerEvents","addCanvas","updateCursor","borderRightWidth","cursorWidth","borderRightColor","cursorColor","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","entry","updateDimensions","leftOffset","initWave","initProgress","push","lastEntry","parentElement","destroy","pop","frame","_this3","prepareDraw","hasMinVals","ch","undefined","peakIndexScale","bar","_this4","gap","barGap","step","peakIndex","peakIndexRange","floor","peakIndexEnd","newPeak","abs","barMinHeight","reflectedPeaks","len","_this5","drawLine","splitChannelsOptions","channelColors","_this6","setFillStyles","applyCanvasTransforms","drawLines","startCanvas","endCanvas","intersection","x1","y1","x2","y2","fillRects","splitChannels","filterChannels","includes","fn","drawIndex","normalizedMax","Array","channels","_this7","filteredChannels","filter","c","hideChannel","overlay","setHeight","overallAbsMax","relativeNormalization","map","absMax","channelPeaks","indexOf","barHeight","normalize","some","call","val","all","getImage","images","MediaElementWebAudio","sourceMediaElement","setPlaybackRate","audioRate","createTimer","createVolumeNode","createScriptNode","createAnalyserNode","media","preload","_get","createMediaElementSource","mediaElement","ac","connect","analyser","resumeAudioContext","destroyWebAudio","MediaElement","currentTime","duration","paused","playbackRate","play","pause","volume","mediaType","elementPosition","isMuted","buffer","onPlayEnd","mediaListeners","error","canplay","ended","seeked","volumechange","muted","Object","keys","removeEventListener","onAudioProcess","isPaused","getCurrentTime","on","url","controls","mediaControls","autoplay","src","prevMedia","querySelector","_load","elt","HTMLMediaElement","Error","load","_setupMediaListeners","setVolume","explicitDuration","Infinity","seekable","getDuration","isNaN","clearPlayEnd","seekTo","promise","setPlayEnd","_onPlayEnd","time","un","deviceId","setSinkId","reject","destroyed","removeMediaElementOnDestroy","WebAudio","PeakCache","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","arr","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs","values","ProgressHandler","instance","contentLength","response","_reader","body","getReader","total","parseInt","loaded","controller","read","then","done","onProgress","lengthComputable","close","byteLength","enqueue","catch","fetchFile","options","fetchHeaders","Headers","fetchRequest","Request","AbortController","requestHeaders","append","header","key","responseType","fetchOptions","method","headers","mode","credentials","cache","redirect","referrer","signal","fetch","progressAvailable","get","Response","ReadableStream","errMsg","ok","arrayBuffer","json","blob","text","status","func","args","arguments","getId","prefix","random","toString","substring","largest","smallest","Number","_disabledEventEmissions","handlers","event","callback","splice","handler","apply","setTimeout","eventNames","_isDisabledEventEmission","verticalPropMap","offsetTop","offsetWidth","mapProp","prop","prototype","hasOwnProperty","isProxy","Symbol","Proxy","obj","receiver","bind","set","preventClickHandler","stopPropagation","preventClick","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","ignoreSilenceMode","audioData","tmp","innerHTML","audioSilentMode","children","disableRemotePlayback","remove","PluginClass","ws","WaveSurfer","_defineProperty","audioContext","audioScriptProcessor","backend","backgroundColor","dragSelection","desynchronized","forceDecode","loopSelection","mediaContainer","minPxPerSec","partialRender","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","renderer","responsive","skipLength","xhr","assign","defaultParams","transform","setBackgroundColor","savedVolume","tmpEvents","currentRequest","arraybuffer","drawer","peakCache","supportsWebAudio","Backend","backends","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","registerPlugins","createDrawer","createBackend","createPeakCache","addPlugin","plugin","deferInit","initPlugin","staticProps","pluginStaticProp","Instance","observerPrototypeKeys","getOwnPropertyNames","destroyPlugin","init","drawBuffer","getPlayedPercents","newVolume","getVolume","seconds","skip","seekAndCenter","recenter","isFinite","_this8","isWebAudioBackend","oldScrollParent","getPlaybackRate","setMute","mute","filters","channelIdx","background","channelIndices","newRanges","addRangeToPeakCache","getPeaks","drawPeaks","pxPerSec","decodeArrayBuffer","_this9","loadDecodedBuffer","data","reader","FileReader","_this10","loadArrayBuffer","result","readAsArrayBuffer","empty","preloadIgnoreReasons","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","action","_this11","once","getArrayBuffer","setPeaks","urlOrElt","loadElt","_this12","err","_this13","request","_this14","percentComplete","accuracy","noWindow","blobJSON","Blob","JSON","stringify","objURL","URL","createObjectURL","open","revokeObjectURL","cancel","abort","stop","disconnectSource","cancelAjax","clearTmpEvents","destroyAllPlugins","wavesurfer","__VERSION__","PLAYING","PAUSED","FINISHED","addOnAudioProcess","startPosition","getPlayedTime","removeOnAudioProcess","getAudioContext","lastPlay","scheduledPause","states","create","stateBehaviors","gainNode","mergedPeaks","offlineAc","scriptNode","source","splitPeaks","state","sinkStreamDestination","sinkAudioElement","AudioContext","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","setState","setLength","disconnect","setFilters","disconnectFilters","reduce","prev","curr","createScriptProcessor","scriptBufferSize","createJavaScriptNode","destination","onaudioprocess","createAnalyser","createGain","createGainNode","Audio","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","errback","getOfflineAudioContext","decodeAudioData","numberOfChannels","newBuffer","createBuffer","sampleSize","sampleStep","chan","getChannelData","closeAudioContext","createSource","createBufferSource","noteGrainOn","noteOff","resume","adjustedTime","timeout","context","timestamp","debounced","clearTimeout","__webpack_modules__"],"sourceRoot":"","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/mediaelement-webaudio.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/peakcache.js","webpack://WaveSurfer/./src/util/absMax.js","webpack://WaveSurfer/./src/util/clamp.js","webpack://WaveSurfer/./src/util/fetch.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/index.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/orientation.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/util/silence-mode.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/wavesurfer.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(self, function() {\nreturn ","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(\n            typeof this.constructor.name !== 'undefined'\n                ? this.constructor.name.toLowerCase() + '_'\n                : 'canvasentry_'\n        );\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     * @param {string|string[]} waveColor Fill color for the wave canvas,\n     * or an array of colors to apply as a gradient\n     * @param {?string|string[]} progressColor Fill color for the progress canvas,\n     * or an array of colors to apply as a gradient\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = this.getFillStyle(this.waveCtx, waveColor);\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = this.getFillStyle(this.progressCtx, progressColor);\n        }\n    }\n\n    /**\n     * Utility function to handle wave color arguments\n     *\n     * When the color argument type is a string or CanvasGradient instance,\n     * it will be returned as is. Otherwise, it will be treated as an array,\n     * and a new CanvasGradient will be returned\n     *\n     * @since 6.0.0\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {string|string[]|CanvasGradient} color Either a single fill color\n     *     for the wave canvas, an existing CanvasGradient instance, or an array\n     *     of colors to apply as a gradient\n     * @returns {string|CanvasGradient} Returns a string fillstyle value, or a\n     *     canvas gradient\n     */\n    getFillStyle(ctx, color) {\n        if (typeof color == 'string' || color instanceof CanvasGradient) {\n            return color;\n        }\n\n        const waveGradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n        color.forEach((value, index) => waveGradient.addColorStop((index / color.length), value));\n\n        return waveGradient;\n    }\n\n    /**\n     * Set the canvas transforms for wave and progress\n     *\n     * @param {boolean} vertical Whether to render vertically\n     */\n    applyCanvasTransforms(vertical) {\n        if (vertical) {\n            // Reflect the waveform across the line y = -x\n            this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\n\n            if (this.hasProgressCanvas) {\n                this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\n            }\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n            Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n\n        this.container = util.withOrientation(container, params.vertical);\n        /**\n         * @type {WavesurferParams}\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = util.withOrientation(\n            this.container.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                cursor: this.params.hideCursor ? 'none' : 'auto',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = util.withOrientation(\n            e.targetTouches ? e.targetTouches[0] : e,\n            this.params.vertical\n        ).clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n        const progressPixels = this.getProgressPixels(bbox, clientX);\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress = progressPixels *\n                (this.params.pixelRatio / nominalWidth) || 0;\n        } else {\n            progress = (progressPixels + this.wrapper.scrollLeft) /\n                this.wrapper.scrollWidth || 0;\n        }\n\n        return util.clamp(progress, 0, 1);\n    }\n\n    getProgressPixels(wrapperBbox, clientX) {\n        if (this.params.rtl) {\n            return wrapperBbox.right - clientX;\n        } else {\n            return clientX - wrapperBbox.left;\n        }\n    }\n\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const orientedEvent = util.withOrientation(e, this.params.vertical);\n            const scrollbarHeight = this.wrapper.offsetHeight -\n                  this.wrapper.clientHeight;\n\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        if (this.width == width) {\n            return false;\n        }\n\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            const newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\n            this.style(this.wrapper, {\n                width: newWidth\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container.domElement) {\n                this.container.removeChild(this.wrapper.domElement);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n\n        /**\n         * Whether to render the waveform vertically. Defaults to false.\n         *\n         * @type {boolean}\n         */\n        this.vertical = params.vertical;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n    createElements() {\n        this.progressWave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n        this.style(this.progressWave, {\n            position: 'absolute',\n            zIndex: 3,\n            left: 0,\n            top: 0,\n            bottom: 0,\n            overflow: 'hidden',\n            width: '0',\n            display: 'none',\n            boxSizing: 'border-box',\n            borderRightStyle: 'solid',\n            pointerEvents: 'none'\n        });\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        let wave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('canvas')),\n            this.params.vertical\n        );\n        this.style(wave, {\n            position: 'absolute',\n            zIndex: 2,\n            left: leftOffset + 'px',\n            top: 0,\n            bottom: 0,\n            height: '100%',\n            pointerEvents: 'none'\n        });\n        entry.initWave(wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            let progress = util.withOrientation(\n                this.progressWave.appendChild(document.createElement('canvas')),\n                this.params.vertical\n            );\n            this.style(progress, {\n                position: 'absolute',\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%'\n            });\n            entry.initProgress(progress);\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        util.frame(() => {\n            this.canvases.forEach(entry => entry.clearWave());\n        })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex: ch }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                            this.params.pixelRatio,\n                            this.params.barGap * this.params.pixelRatio\n                        );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let peakIndex = first;\n                for (peakIndex; peakIndex < last; peakIndex += step) {\n\n                    // search for the highest peak in the range this bar falls into\n                    let peak = 0;\n                    let peakIndexRange = Math.floor(peakIndex * scale) * peakIndexScale; // start index\n                    const peakIndexEnd = Math.floor((peakIndex + step) * scale) * peakIndexScale;\n                    do { // do..while makes sure at least one peak is always evaluated\n                        const newPeak = Math.abs(peaks[peakIndexRange]); // for arrays starting with negative values\n                        if (newPeak > peak) {\n                            peak = newPeak; // higher\n                        }\n                        peakIndexRange += peakIndexScale; // skip every other value for negatives\n                    } while (peakIndexRange < peakIndexEnd);\n\n                    // calculate the height of this bar according to the highest peak found\n                    let h = Math.round((peak / absmax) * halfH);\n\n                    // in case of silences, allow the user to specify that we\n                    // always draw *something* (normally a 1px high bar)\n                    if (h == 0 && this.params.barMinHeight) {\n                        h = this.params.barMinHeight;\n                    }\n\n                    this.fillRect(\n                        peakIndex + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius,\n                        ch\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius,\n                    channelIndex\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n        this.canvases.forEach((entry, i) => {\n            this.setFillStyles(entry, waveColor, progressColor);\n            this.applyCanvasTransforms(entry, this.params.vertical);\n            entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\n     */\n    fillRect(x, y, width, height, radius, channelIndex) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n                this.setFillStyles(entry, waveColor, progressColor);\n                this.applyCanvasTransforms(entry, this.params.vertical);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n    hideChannel(channelIndex) {\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n\n                if (this.params.splitChannels) {\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\n                    if (!this.params.splitChannelsOptions.overlay) {\n                        this.setHeight(\n                            Math.max(filteredChannels.length, 1) *\n                                this.params.height *\n                                this.params.pixelRatio\n                        );\n                    }\n\n                    let overallAbsMax;\n                    if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.relativeNormalization) {\n                        // calculate maximum peak across channels to use for normalization\n                        overallAbsMax = util.max(channels.map((channelPeaks => util.absMax(channelPeaks))));\n                    }\n\n\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax)\n                    );\n                }\n                peaks = channels[0];\n            }\n\n            // Return and do not draw channel peaks if hidden.\n            if (this.hideChannel(channelIndex)) {\n                return;\n            }\n\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const halfH = height / 2;\n\n            let offsetY = height * drawIndex || 0;\n\n            // Override offsetY if overlay is true\n            if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.overlay) {\n                offsetY = 0;\n            }\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks,\n                channelIndex: channelIndex\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\n        entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Set the canvas transforms for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {boolean} vertical Whether to render the waveform vertically\n     */\n    applyCanvasTransforms(entry, vertical = false) {\n        entry.applyCanvasTransforms(vertical);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n","import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n    _load(media, peaks, preload) {\n        super._load(media, peaks, preload);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n\n    play(start, end) {\n        this.resumeAudioContext();\n        return super.play(start, end);\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        super.destroy();\n\n        this.destroyWebAudio();\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks, preload) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        //\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\n        // as this almost always triggers some browser fetch of the media.\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null && !isNaN(start)) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n    setMute(muted) {\n        // This causes a volume change to be emitted too through the\n        // volumechange event listener.\n        this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n","import utilMax from './max';\r\nimport utilmin from './min';\r\n\r\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\r\nexport default function absMax(values) {\r\n    const max = utilMax(values);\r\n    const min = utilmin(values);\r\n    return -min > max ? -min : max;\r\n}\r\n","/**\n * Returns a number limited to the given range.\n *\n * @param {number} val The number to be limited to a range\n * @param {number} min The lower boundary of the limit range\n * @param {number} max The upper boundary of the limit range\n * @returns {number} A number in the range [min, max]\n */\nexport default function clamp(val, min, max) {\n    return Math.min(Math.max(min, val), max);\n}\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n","export { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as absMax } from './absMax';\nexport { default as Observer } from './observer';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\nexport { default as clamp } from './clamp';\nexport { default as withOrientation } from './orientation';\nexport { default as ignoreSilenceMode } from './silence-mode';\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this._disabledEventEmissions = [];\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n    setDisabledEventEmissions(eventNames) {\n        this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n\n    _isDisabledEventEmission(event) {\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","const verticalPropMap = {\n    width: 'height',\n    height: 'width',\n\n    overflowX: 'overflowY',\n    overflowY: 'overflowX',\n\n    clientWidth: 'clientHeight',\n    clientHeight: 'clientWidth',\n\n    clientX: 'clientY',\n    clientY: 'clientX',\n\n    scrollWidth: 'scrollHeight',\n    scrollLeft: 'scrollTop',\n\n    offsetLeft: 'offsetTop',\n    offsetTop: 'offsetLeft',\n    offsetHeight: 'offsetWidth',\n    offsetWidth: 'offsetHeight',\n\n    left: 'top',\n    right: 'bottom',\n    top: 'left',\n    bottom: 'right',\n\n    borderRightStyle: 'borderBottomStyle',\n    borderRightWidth: 'borderBottomWidth',\n    borderRightColor: 'borderBottomColor'\n};\n\n/**\n * Convert a horizontally-oriented property name to a vertical one.\n *\n * @param {string} prop A property name\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {string} prop, converted appropriately\n */\nfunction mapProp(prop, vertical) {\n    if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\n        return vertical ? verticalPropMap[prop] : prop;\n    } else {\n        return prop;\n    }\n}\n\nconst isProxy = Symbol(\"isProxy\");\n\n/**\n * Returns an appropriately oriented object based on vertical.\n * If vertical is true, attribute getting and setting will be mapped through\n * verticalPropMap, so that e.g. getting the object's .width will give its\n * .height instead.\n * Certain methods of an oriented object will return oriented objects as well.\n * Oriented objects can't be added to the DOM directly since they are Proxy objects\n * and thus fail typechecks. Use domElement to get the actual element for this.\n *\n * @param {object} target The object to be wrapped and oriented\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\n * @since 5.0.0\n */\nexport default function withOrientation(target, vertical) {\n    if (target[isProxy]) {\n        return target;\n    } else {\n        return new Proxy(\n            target, {\n                get: function(obj, prop, receiver) {\n                    if (prop === isProxy) {\n                        return true;\n                    } else if (prop === 'domElement') {\n                        return obj;\n                    } else if (prop === 'style') {\n                        return withOrientation(obj.style, vertical);\n                    } else if (prop === 'canvas') {\n                        return withOrientation(obj.canvas, vertical);\n                    } else if (prop === 'getBoundingClientRect') {\n                        return function(...args) {\n                            return withOrientation(obj.getBoundingClientRect(...args), vertical);\n                        };\n                    } else if (prop === 'getContext') {\n                        return function(...args) {\n                            return withOrientation(obj.getContext(...args), vertical);\n                        };\n                    } else {\n                        let value = obj[mapProp(prop, vertical)];\n                        return typeof value == 'function' ? value.bind(obj) : value;\n                    }\n                },\n                set: function(obj, prop, value) {\n                    obj[mapProp(prop, vertical)] = value;\n                    return true;\n                }\n            }\n        );\n    }\n}\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","/**\n * Ignores device silence mode when using the `WebAudio` backend.\n *\n * Many mobile devices contain a hardware button to mute the ringtone for incoming\n * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\n * wavesurfer's audio when using the `WebAudio` backend. This function creates a\n * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\n * when muting the device ringer.\n *\n * @since 5.2.0\n */\nexport default function ignoreSilenceMode() {\n    // Set the src to a short bit of url encoded as a silent mp3\n    // NOTE The silence MP3 must be high quality, when web audio sounds are played\n    // in parallel the web audio sound is mixed to match the bitrate of the html sound\n    // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n    const audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\n\n    // disable iOS Airplay (setting the attribute in js doesn't work)\n    let tmp = document.createElement(\"div\");\n    tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\n\n    let audioSilentMode = tmp.children.item(0);\n    audioSilentMode.src = audioData;\n    audioSilentMode.preload = \"auto\";\n    audioSilentMode.type = \"audio/mpeg\";\n    audioSilentMode.disableRemotePlayback = true;\n\n    // play\n    audioSilentMode.play();\n\n    // cleanup\n    audioSilentMode.remove();\n    tmp.remove();\n}\n","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} hideCursor=false Whether to hide the mouse cursor\n * when one would normally be shown by default.\n * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\n * when using the `WebAudio` backend.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\n * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @typedef {Object} SplitChannelOptions\n * @desc parameters applied when splitChannels option is true\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\n * @property {object} channelColors={} object describing color for each channel. Example:\n * {\n *     0: {\n *         progressColor: 'green',\n *         waveColor: 'pink'\n *     },\n *     1: {\n *         progressColor: 'orange',\n *         waveColor: 'purple'\n *     }\n * }\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\n * @property {boolean} relativeNormalization=false determines whether\n * normalization is done per channel or maintains proportionality between\n * channels. Only applied when normalize and splitChannels are both true.\n * @since 4.3.0\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: false\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        hideCursor: false,\n        ignoreSilenceMode: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        splitChannelsOptions: {\n            overlay: false,\n            channelColors: {},\n            filterChannels: [],\n            relativeNormalization: false\n        },\n        vertical: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n        this.params.splitChannelsOptions = Object.assign(\n            {},\n            this.defaultParams.splitChannelsOptions,\n            params.splitChannelsOptions\n        );\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            if (this.params.vertical === true) {\n                util.style(this.container, { transform: 'rotateX(180deg)' });\n            } else {\n                util.style(this.container, { transform: 'rotateY(180deg)' });\n            }\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    if (prevWidth) {\n                        // redraw only if waveform container is rendered and has a width\n                        this.drawer.fireEvent('redraw');\n                    }\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        if (this.params.ignoreSilenceMode) {\n            // ignores device hardware silence mode\n            util.ignoreSilenceMode();\n        }\n\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const isWebAudioBackend = this.params.backend === 'WebAudio';\n        const paused = this.backend.isPaused();\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.pause();\n        }\n\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.play();\n        }\n\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (this.backend.setMute) {\n            // Backends such as the MediaElement backend have their own handling\n            // of mute, let them handle it.\n            this.backend.setMute(mute);\n            this.isMuted = mute;\n        } else {\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n            }\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its wave color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getWaveColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].waveColor;\n        }\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its wave color if splitChannels is true\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color, channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].waveColor = color;\n        } else {\n            this.params.waveColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its progress color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getProgressColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].progressColor;\n        }\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its progress color if splitChannels is true\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color, channelIdx) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].progressColor = color;\n        } else {\n            this.params.progressColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n    setFilteredChannels(channelIndices) {\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        // loadBuffer(url, peaks, duration) requires that url is a string\n        // but users can pass in a HTMLMediaElement to WaveSurfer\n        if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\n            url = url.src;\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If peaks are provided, render them and fire the `waveform-ready` event.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n        }\n\n        // If no pre-decoded peaks are provided, or are provided with\n        // forceDecode flag, attempt to download the audio file and decode it\n        // with Web Audio.\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        if (!this.isDestroyed) {\n            this.arraybuffer = arraybuffer;\n            this.backend.decodeArrayBuffer(\n                arraybuffer,\n                data => {\n                    // Only use the decoded data if we haven't been destroyed or\n                    // another decode started in the meantime\n                    if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                        callback(data);\n                        this.arraybuffer = null;\n                    }\n                },\n                () => this.fireEvent('error', 'Error decoding audiobuffer')\n            );\n        }\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and optionally opens in a new window\n     * as valid JSON Blob instance.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n\n        return new Promise((resolve, reject) => {\n            if (!noWindow){\n                const blobJSON = new Blob(\n                    [JSON.stringify(arr)],\n                    {type: 'application/json;charset=utf-8'}\n                );\n                const objURL = URL.createObjectURL(blobJSON);\n                window.open(objURL);\n                URL.revokeObjectURL(objURL);\n            }\n            resolve(arr);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `'image/png'`. Other supported types are\n     * `'image/jpeg'` and `'image/webp'`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `'image/png'`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `'image/jpeg'`` and `'image/webp'`.\n     * @param {string} type Image data type to return. Either 'dataURL' (default)\n     * or 'blob'.\n     * @return {string|string[]|Promise} When using `'dataURL'` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `'blob'` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n            // See: Wavesurfer issue #2042\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n            if (this.currentRequest._reader) {\n                // Ignoring exceptions thrown by call to cancel()\n                this.currentRequest._reader.cancel().catch(err => {});\n            }\n\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n            // clears memory usage\n            this.backend = null;\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** scriptBufferSize: size of the processing buffer */\n    static scriptBufferSize = 256;\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /** @private */\n        this.sinkStreamDestination = null;\n        /** @private */\n        this.sinkAudioElement = null;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = null;\n    }\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            if (!this.sinkAudioElement) {\n                this.sinkAudioElement = new window.Audio();\n                // autoplay is necessary since we're not invoking .play()\n                this.sinkAudioElement.autoplay = true;\n            }\n            if (!this.sinkAudioElement.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            if (!this.sinkStreamDestination) {\n                this.sinkStreamDestination = this.ac.createMediaStreamDestination();\n            }\n            this.gainNode.disconnect();\n            this.gainNode.connect(this.sinkStreamDestination);\n            this.sinkAudioElement.srcObject = this.sinkStreamDestination.stream;\n\n            return this.sinkAudioElement.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        if ('webkitAudioContext' in window) {\n            // Safari: no support for Promise-based decodeAudioData enabled\n            // Enable it in Safari using the Experimental Features > Modern WebAudio API option\n            this.offlineAc.decodeAudioData(\n                arraybuffer,\n                data => callback(data),\n                errback\n            );\n        } else {\n            this.offlineAc.decodeAudioData(arraybuffer).then(\n                (data) => callback(data)\n            ).catch(\n                (err) => errback(err)\n            );\n        }\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                /**\n                 * Initialize the max and min to the first sample of this\n                 * subrange, so that even if the samples are entirely\n                 * on one side of zero, we still return the true max and\n                 * min values in the subrange.\n                 */\n                let min = chan[start];\n                let max = min;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n    destroyWebAudio() {\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n\n        // disconnect resources used by setSinkId\n        if (this.sinkStreamDestination) {\n            this.sinkAudioElement.pause();\n            this.sinkAudioElement.srcObject = null;\n            this.sinkStreamDestination.disconnect();\n            this.sinkStreamDestination = null;\n        }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n\n        this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.setPlaybackRate(this.playbackRate);\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n    resumeAudioContext() {\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        this.resumeAudioContext();\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        try {\n            this.source && this.source.stop(0);\n        } catch (err) {\n            // Calling stop can throw the following 2 errors:\n            // - RangeError (The value specified for when is negative.)\n            // - InvalidStateNode (The node has not been started by calling start().)\n            // We can safely ignore both errors, because:\n            // - The range is surely correct\n            // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\n        }\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.source && this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/wavesurfer.js\");\n"]},"metadata":{},"sourceType":"script"}